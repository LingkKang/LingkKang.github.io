<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>A MDP Take-away</title>
    <link href="/2023/05/06/mdp/"/>
    <url>/2023/05/06/mdp/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="A-MDP-Take-away"><a href="#A-MDP-Take-away" class="headerlink" title="A MDP Take-away"></a>A MDP Take-away</h1><h2 id="Problem-formulation"><a href="#Problem-formulation" class="headerlink" title="Problem formulation"></a>Problem formulation</h2><ul><li><code>states</code>: a set of all possible states</li><li><code>start_state</code>: starting state</li><li><code>actions(state)</code>: with given state, return a list of all valid action</li><li><code>T(state, action, new_state)</code>: return probability of <code>s&#39;</code> if taking action <code>a</code> at state <code>s</code></li><li><code>reward(state, action, new_state)</code>: return reward for the given transition</li><li><code>is_end(state)</code>: check whether at terminal state</li><li><code>gamma</code> &#x2F; <code>discount</code>: discount factor for future (not bigger than 1 and not less than 0)</li></ul><h2 id="Value-Iteration"><a href="#Value-Iteration" class="headerlink" title="Value Iteration"></a>Value Iteration</h2><p><strong>Value iteration</strong> converges quite fast.</p><ul><li>initialize <code>v</code> of all states <code>s</code> to 0</li><li>for iteration <code>t</code> in <code>1..</code> (until convergence or max iteration depth)<ul><li>for each state <code>s</code><ul><li>for <code>a</code> in <code>actions(s)</code><ul><li>get <code>q</code> value <code>Q(s, a)</code></li></ul></li><li>take maximum of all <code>q</code> values <code>max_q</code></li><li>update <code>v</code> of <code>s</code> with <code>max_q</code></li></ul></li></ul></li><li>return all <code>v</code></li></ul><h3 id="Q-value"><a href="#Q-value" class="headerlink" title="Q value"></a>Q value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">Q(s: state, a: action) -&gt; <span class="hljs-built_in">float</span><br></code></pre></td></tr></table></figure><p>with given state <code>s</code> and action <code>a</code>:</p><ul><li>for all possible new state <code>new_state</code><ul><li>take possibility <code>T(state, action, new_state)</code> as <code>p</code></li><li>take rewards as <code>r</code></li><li><code>item</code> &#x3D; <code>p * (r + discount * v)</code>, where <code>v</code> is value of <code>new_state</code></li><li>return the sum of all <code>item</code></li></ul></li></ul><h2 id="Policy-Evaluation"><a href="#Policy-Evaluation" class="headerlink" title="Policy Evaluation"></a>Policy Evaluation</h2><p><strong>Policy</strong> is a function which maps from a state to an action, specifying with given state, what action should be applied.</p><p>Use <strong>policy evaluation</strong> to determine whether a policy <code>pi</code> is good enough or outperforming other policies.</p><ul><li>initialize <code>v</code> of all states <code>s</code> to 0</li><li>for iteration <code>t</code> in <code>1..</code> (until convergence or max iteration depth)<ul><li>for each state <code>s</code><ul><li>action <code>a</code> comes form evaluated policy <code>pi</code></li><li>update <code>v</code> of <code>s</code> with <code>Q(s, a)</code></li></ul></li></ul></li></ul><p>This is done by cutting down all possible actions in <em>value iteration</em> to one action generated by evaluated policy <code>pi</code>.</p><h2 id="Policy-Iteration"><a href="#Policy-Iteration" class="headerlink" title="Policy Iteration"></a>Policy Iteration</h2><p>By evaluating and updating policy to find the best policy, i.e., all of the actions given by the policy is optimal and have the highest <code>v</code> value. So does the policy.</p><ul><li>randomly initialize policy <code>pi</code></li><li>for iteration <code>t</code> in <code>1..</code>, until convergence (<code>pi</code> not change) or max iteration depth<ul><li>get <code>v</code> of states by policy evaluation</li><li>improve policy<ul><li>for <code>s</code> in all states<ul><li>for <code>a</code> in all valid actions<ul><li><code>q</code> &#x3D; <code>Q(s, a)</code></li></ul></li><li>get maximum <code>q</code> as <code>max_q</code></li><li>update policy of <code>s</code> to <code>a</code> with <code>max_q</code></li></ul></li></ul></li></ul></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.youtube.com/watch?v=9g32v7bK3Co">Markov Decision Processes 1 - Value Iteration | Stanford CS221: AI (Autumn 2019) - YouTube</a></li><li><a href="https://www.youtube.com/watch?v=d5gaWTo6kDM">Lecture 17 - MDPs &amp; Value&#x2F;Policy Iteration | Stanford CS229: Machine Learning Andrew Ng (Autumn2018) - YouTube</a></li><li><a href="https://www.youtube.com/watch?v=06VGcri5240&list=PLp8QV47qJEg7a44Z3_q0apWF8s9a5soOI&index=9">[CS188 FA22] Lecture 7 - MDPs I - YouTube</a></li><li><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note07.pdf">cs188-fa22-note07.pdf</a></li><li><a href="https://www.baeldung.com/cs/ml-value-iteration-vs-policy-iteration">Value Iteration vs. Policy Iteration in Reinforcement Learning | Baeldung on Computer Science</a></li><li><a href="http://incompleteideas.net/book/ebook/node43.html">4.3 Policy Iteration</a></li><li><a href="https://cs50.harvard.edu/ai/2020/weeks/4/">Week 4 Learning - CS50’s Introduction to Artificial Intelligence with Python</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Algorithms &amp; Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Optimization</tag>
      
      <tag>MDP</tag>
      
      <tag>Machine Learning</tag>
      
      <tag>Artificial Intelligence</tag>
      
      <tag>Bellman Equation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manipulate 64-bit value with 32-bit registers</title>
    <link href="/2023/04/15/64bit-val-in-32/"/>
    <url>/2023/04/15/64bit-val-in-32/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Manipulate-64-bit-value-with-32-bit-registers"><a href="#Manipulate-64-bit-value-with-32-bit-registers" class="headerlink" title="Manipulate 64-bit value with 32-bit registers"></a>Manipulate 64-bit value with 32-bit registers</h1><p>Say, a 64-bit unsigned integer is stored at two 32-bit registers, <code>s0</code> (lower bits) and <code>s1</code> (higher bits) respectively.</p><h2 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h2><p>And now, we need to add a 32-bit unsigned integer stored at register <code>t0</code> to it, how could we do.</p><p>Recall the feature of two’s complement in binary, integer overflow is same as left a carry forgotten.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ASM">mv          t1, s0      # save a copy of lower bits<br>add         s0, s0, t0  # add to lower bits<br>sltu        t2, s0, t1  # check for carry<br>addi        s1, s1, t2  # add carry<br></code></pre></td></tr></table></figure><p>Here <code>sltu</code> stands for <em>set less than unsigned</em>, meaning that if <code>s0</code> is less than <code>t1</code>, <code>t2</code> will be set to <code>1</code>, otherwise, <code>t2</code> will be <code>0</code>. This is just what we need.</p><p>If the new lower 32 bits is smaller than the original one (at <code>t1</code>), meaning there is an overflow, so we should increase the higher 32 bits <code>s1</code> by 1.</p><h2 id="Subtraction"><a href="#Subtraction" class="headerlink" title="Subtraction"></a>Subtraction</h2><p>This can also apply to subtraction.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">mv          t1, s0<br>sub         s0, s0, t1<br>sltu        t2, s0, t1<br>addi        t2, t2, 1<br>add         s1, s1, t2<br></code></pre></td></tr></table></figure><h2 id="More-Details"><a href="#More-Details" class="headerlink" title="More Details"></a>More Details</h2><p>Take 4 bits and 8 bits as an example.</p><table><thead><tr><th>Meaning</th><th align="right">binary</th><th>decimal</th></tr></thead><tbody><tr><td><em>1.</em> 8 bits unsigned integer</td><td align="right"><code>0x0001_0101</code></td><td>21</td></tr><tr><td><em>2.</em> 4 bits unsigned integer <code>t0</code></td><td align="right"><code>0x0111</code></td><td>7</td></tr><tr><td><em>3.</em> difference in 8 bits</td><td align="right"><code>0x0000_1110</code></td><td>14</td></tr><tr><td><em>4.</em> opposite number of <code>t0</code></td><td align="right"><code>0x1001</code></td><td>-</td></tr><tr><td><em>5.</em> add <em>4</em> to lower bits</td><td align="right"><code>0x1110</code></td><td>-</td></tr></tbody></table><p>If borrow occurred, value in <em>5</em> will greater than the lower bits of the original number.</p><p>In other words, if new lower bits is less than the original one, <code>t2</code> will be set to <code>1</code> and then <code>0</code>, there is no borrow. Otherwise, <code>t2</code> will be set to <code>0</code> and then <code>-1</code>, take away one from higher bits.</p>]]></content>
    
    
    <categories>
      
      <category>Algorithms &amp; Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
      <tag>Register</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Peripheral Interrupt Procedure in RISC-V</title>
    <link href="/2023/04/02/peripheral-interrupt/"/>
    <url>/2023/04/02/peripheral-interrupt/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Peripheral-Interrupt-Procedure-in-RISC-V"><a href="#Peripheral-Interrupt-Procedure-in-RISC-V" class="headerlink" title="Peripheral Interrupt Procedure in RISC-V"></a>Peripheral Interrupt Procedure in RISC-V</h1><p>The procedure of peripheral interrupt in RISC-V is quite complicated and multi-layered.</p><p>Basically, all peripheral interrupts are reported to <strong>platform-level interrupt controller</strong> or <strong>PLIC</strong>, which is similar to PIC (programmable interrupt controller) in x86 architecture.</p><p>The memory mapped from PLIC varied by platforms. Chapter 3 of official <a href="https://github.com/riscv/riscv-plic-spec">PLIC Specification</a> gives a sample. In QEMU, it could be found under <a href="https://github.com/qemu/qemu/tree/master/include/hw/riscv"><code>qemu/include/hw/riscv</code></a> folder.</p><h2 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h2><p>There are (five types of) registers for PLIC:</p><ul><li><code>priority</code></li><li><code>pending</code></li><li><code>enable</code></li><li><code>threshold</code></li><li><code>claim</code>&#x2F;<code>complete</code></li></ul><h3 id="Priorities"><a href="#Priorities" class="headerlink" title="Priorities"></a>Priorities</h3><p>The priorities of external interrupts are defined in <code>priority</code> registers, whose ranges from <code>1</code> to <code>1023</code> (1023 sources in total, also known as <em>interrupt identifiers</em>, ID). Note that <code>0</code> is reserved for no interrupt occurring.</p><p>1 interrupt source maps to 1 register. For example, </p><table><thead><tr><th>Address</th><th>Mapping</th></tr></thead><tbody><tr><td><code>base</code> + <code>0x0000</code></td><td><strong>Reserved</strong></td></tr><tr><td><code>base</code> + <code>0x0004</code></td><td>priority value of Interrupt source 1</td></tr><tr><td><code>base</code> + <code>0x0008</code></td><td>priority value of Interrupt source 2</td></tr><tr><td>…</td><td>…</td></tr><tr><td><code>base</code> + <code>0x0FFC</code></td><td>priority value of Interrupt source 1023</td></tr></tbody></table><p>The value in the <code>priority</code> is the priority level of mapped resource. <code>0</code> is representing <em>never interrupt</em>, and the larger the higher priority.</p><p>If two interrupt resources have the same priority level, PLIC will get the smallest ID first and give the interrupt to Hart to handle.</p><h4 id="QEMU-Specific"><a href="#QEMU-Specific" class="headerlink" title="QEMU Specific"></a>QEMU Specific</h4><p>QEMU’s RISC-V virtual machine <a href="https://github.com/qemu/qemu/blob/master/hw/riscv/virt.c"><code>virt</code></a> supports 7 levels of priority.</p><p>In its <code>create_pcie_irq_map</code> function, it set that</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">qemu_fdt_setprop_cells(fdt, nodename, <span class="hljs-string">&quot;interrupt-map-mask&quot;</span>,<br>                           <span class="hljs-number">0x1800</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x7</span>);<br></code></pre></td></tr></table></figure><p><code>qemu_fdt_setprop_cells</code> is a function-like macro defined in <code>qemu/include/sysemu/device_tree.h</code>, helping set up. <code>fdt</code> stands for <em>flattened device tree</em> and represents the device tree blob pointer. And <code>prop</code> means properties. It treats <code>interrupt-map-mask</code> as a property whit smallest value <code>0</code> and biggest value <code>7</code>.</p><h3 id="Pending"><a href="#Pending" class="headerlink" title="Pending"></a>Pending</h3><p>Each bit of <code>pending</code> corresponds to one interrupt source, <code>1</code> for interrupt happening.  </p><h2 id="Interrupt-Flow"><a href="#Interrupt-Flow" class="headerlink" title="Interrupt Flow"></a>Interrupt Flow</h2><p>When external interrupts come in:</p><ol><li><strong>PLIC</strong> checks their <code>priority</code><ul><li>if same, get the one with the smallest interrupt source ID</li></ul></li><li><strong>PLIC</strong> checks <code>enable</code></li><li><strong>PLIC</strong> checks is the <code>priority</code> bigger than <code>threshold</code></li><li><strong>PLIC</strong> sets corresponding <code>pending</code><ul><li>HART’s running is interrupted and starts to handle the interrupt</li></ul></li><li><strong>HART</strong> reads value from <code>claim</code> to know interrupt source ID</li><li><strong>HART</strong> calls corresponding functions</li><li><strong>HART</strong> writes back to <code>complete</code></li><li><strong>HART</strong> returns to normal running</li><li><strong>PLIC</strong> cleans the <code>pending</code></li></ol><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><ol><li>Define interrupt source ID</li><li>Set <code>priority</code></li><li>Set <code>enable</code></li><li>Set <code>threshold</code></li><li>Set <code>MIE</code> bit in <code>mstatus</code>, M-mode global interrupt-enable bit (for M-mode)</li><li>Set <code>MEIE</code> bit in <code>mie</code>, machine-level external interrupts enable bit in machine interrupt enable register.</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://github.com/riscv/riscv-plic-spec">riscv&#x2F;riscv-plic-spec: PLIC Specification</a></li><li><a href="https://www.bilibili.com/video/BV1Q5411w7z5/?p=21">[完结] 循序渐进，学习开发一个RISC-V上的操作系统 - 汪辰 - 2021春：第11章-外部设备中断_哔哩哔哩_bilibili</a></li><li><a href="https://picguides.com/beginner/interrupts.php">Interrupts - Beginner’s Guide to PIC Programming - picguides.com</a></li><li><a href="https://github.com/cccriscv/mini-riscv-os/blob/master/doc/tw/07-ExterInterrupt.md">mini-riscv-os&#x2F;07-ExterInterrupt.md at master · cccriscv&#x2F;mini-riscv-os</a></li><li><a href="https://wiki.osdev.org/PLIC">PLIC - OSDev Wiki</a></li><li><a href="https://wiki.osdev.org/PIC">8259 PIC - OSDev Wiki</a></li><li><a href="https://github.com/ianchen0119/AwesomeCS/wiki/2-4-RISC-V::%E4%B8%AD%E6%96%B7%E8%88%87%E7%95%B0%E5%B8%B8%E8%99%95%E7%90%86----%E4%B8%AD%E6%96%B7%E7%AF%87">2 4 RISC V::中斷與異常處理 中斷篇 · ianchen0119&#x2F;AwesomeCS Wiki</a></li><li><a href="https://github.com/ianchen0119/AwesomeCS/wiki/2-5-RISC-V::%E4%B8%AD%E6%96%B7%E8%88%87%E7%95%B0%E5%B8%B8%E8%99%95%E7%90%86----PLIC-%E4%BB%8B%E7%B4%B9">2 5 RISC V::中斷與異常處理 PLIC 介紹 · ianchen0119&#x2F;AwesomeCS Wiki</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Operating System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
      <tag>QEMU</tag>
      
      <tag>Interrupt</tag>
      
      <tag>Peripheral</tag>
      
      <tag>PLIC</tag>
      
      <tag>FDT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Align Number to Multiple</title>
    <link href="/2023/03/12/align/"/>
    <url>/2023/03/12/align/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Align-Number-to-Multiple"><a href="#Align-Number-to-Multiple" class="headerlink" title="Align Number to Multiple"></a>Align Number to Multiple</h1><p>Aligning an integer, say <code>n</code>, to its closest muplitple of <code>m</code> is easy by using <code>round(n / m) * m</code> (arithmetic division) or <code>(n + m - 1) / m * m</code> (<em>Euclidean division</em>).</p><p>However, if <code>m</code> is a power of 2, i.e., <code>m</code> &#x3D; 2<sup>k</sup>, using bitwise operations can help a lot.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">aligned_n = (n + (m - <span class="hljs-number">1</span>)) &amp; ~(m - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>This should be viewed from a binary perspective.</p><p>For example, say <code>m = 8</code> and demonstrate it in 8-bit binary.</p><table><thead><tr><th>variable</th><th align="center">number</th><th align="center">binary</th></tr></thead><tbody><tr><td><code>m</code></td><td align="center">8</td><td align="center">0000 1000</td></tr><tr><td><code>m - 1</code></td><td align="center">7</td><td align="center">0000 0111</td></tr><tr><td><code>~(m - 1)</code></td><td align="center">&#x2F;</td><td align="center">1111 1000</td></tr></tbody></table><p>By applying <em>bitwise AND</em> <code>&amp;</code>, the lower bits of the number are cleaned to <code>0</code>, leaving the result becoming the multiple of <code>m</code>.</p><p>If not adding <code>m - 1</code>, the result will be the closest multiple smaller than <code>n</code>, and adding it makes sure the result is bigger than the original number <code>n</code>.</p><h2 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h2><p><code>(n + m/2) &amp; ~(m-1)</code> is an alternative, and adding a number ranging from <code>m/2</code> to <code>m - 1</code> is technically all fine.</p><p>This method could be helpful in memory page alignment, where standard library is not available and we can sacrifice a little bit of readability of the code. For example, <code>PGROUNDUP</code> and <code>PGROUNDDOWN</code> in <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/riscv.h#L338-L339">xv6</a>, which stand for <em>page round up</em> and <em>page round down</em>, are implemented in this way.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://stackoverflow.com/questions/10493411/what-is-bit-masking">c - What is bit masking? - Stack Overflow</a></li><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2">Bit Twiddling Hacks - Round up to the next highest power of 2</a></li><li><a href="https://stackoverflow.com/questions/43289022/what-do-pgroundup-and-pgrounddown-in-xv6-mean">c - What do PGROUNDUP and PGROUNDDOWN in xv6 mean? - Stack Overflow</a></li><li><a href="https://github.com/mit-pdos/xv6-riscv">mit-pdos&#x2F;xv6-riscv: Xv6 for RISC-V</a></li><li><a href="https://en.wikipedia.org/wiki/Bitwise_operation">Bitwise operation - Wikipedia</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Algorithms &amp; Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bitwise Operation</tag>
      
      <tag>Optimization</tag>
      
      <tag>xv6</tag>
      
      <tag>Memory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Read and Write by Polling with UART</title>
    <link href="/2023/02/28/polling-read-write/"/>
    <url>/2023/02/28/polling-read-write/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Read-and-Write-by-Polling-with-UART"><a href="#Read-and-Write-by-Polling-with-UART" class="headerlink" title="Read and Write by Polling with UART"></a>Read and Write by Polling with UART</h1><p>In the early stages of development, the first ‘hello world’ is implemented via UART serial port since handling the screen is a more complicated task.</p><p>Developing on QEMU is just like developing on a physical machine. The kernel runs in the QEMU virtual machine, which is connected to the host machine by UART, specifically the <a href="http://byterunner.com/16550.html">16550 UART</a>.</p><p>UART, or universal asynchronous receiver&#x2F;transmitter, is a serial-port communicator embedded on board. It needs some settings and initialization for data tranmission, and these tasks are done in the file <code>uart.c</code>.</p><p>Basically, everything inside 16550 UART is mapped to the memory location <code>UART0</code>. One register may have one or more functionalities, and is always distinguished by the <strong>read mode</strong> and <strong>write mode</strong>.</p><h2 id="Initialize-UART"><a href="#Initialize-UART" class="headerlink" title="Initialize UART"></a>Initialize UART</h2><p>This is done in 3 steps:</p><ol><li>Disable interrupts (which will be discussed in the future).</li><li>Set the baud rate.</li><li>Set the data communication format.</li></ol><p>More information can be found in the source code.</p><p>UART initialization should only be done once after booting.</p><h2 id="Setting-the-Baud-Rate"><a href="#Setting-the-Baud-Rate" class="headerlink" title="Setting the Baud Rate"></a>Setting the Baud Rate</h2><p>The baud rate is the frequency of data transmission and should be set to the same value for both the transmitter and receiver.</p><p>But note that the divisor latch is seprated into 2 parts, <code>DLL</code> and <code>DLM</code>, which stand for the least and most significant bits of the divisor latch, respectively. </p><h2 id="Polling-and-UART-I-x2F-O"><a href="#Polling-and-UART-I-x2F-O" class="headerlink" title="Polling and UART I&#x2F;O"></a>Polling and UART I&#x2F;O</h2><p>To write things through UART, we just need to put the data into <code>THR</code> (the <em>transmit holding register</em> in write mode). However, as data transmission takes time, we need to check whether the data in <code>THR</code> was sent before new data was put into it.</p><p>The <em>line status register</em>‘s bit 5 (6<sup>th</sup> bit) is designed for this purpose. This bit will be set to 0 to indicate that transmission is complete.</p><p>Therefore, when we want to write through UART, we keep checking this bit. When we get a zero, we know that we can put our data. This procedure of continuously asking a register is also known as <strong>polling</strong>. </p><p>Printing a string could be seen as printing chars iteratively. </p><p>Reading data from console is technically the same thing, except that we check and read data from different registers.</p><h2 id="Other-Notes"><a href="#Other-Notes" class="headerlink" title="Other Notes"></a>Other Notes</h2><p>Remember to add <code>--nographic</code> flag when running QEMU. This flag means to disable the QEMU graphic monitor and use UART as the I&#x2F;O device, so all output and input will be displayed on the current terminal.</p><p>To quit QEMU emulator, just press <code>Ctrl + A</code> then press <code>X</code>. Or press <code>Ctrl + A</code> followed by <code>C</code>, and then type <code>quit</code>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="http://byterunner.com/16550.html">ByteRunner.com | TECHNICAL DATA ON 16550</a></li><li><a href="https://www.bilibili.com/video/BV1Q5411w7z5/?p=17">[完结] 循序渐进，学习开发一个RISC-V上的操作系统 - 汪辰 - 第7章（下）-Hello RVOS_哔哩哔哩_bilibili</a></li><li><a href="https://github.com/plctlab/riscv-operating-system-mooc/blob/main/code/os/01-helloRVOS/uart.c">riscv-operating-system-mooc&#x2F;uart.c at main · plctlab&#x2F;riscv-operating-system-mooc</a></li><li><a href="https://pdos.csail.mit.edu/6.828/2022/xv6/book-riscv-rev3.pdf">xv6: a simple, Unix-like teaching operating system</a>, Russ Cox, Frans Kaashoek, Robert Morris, MIT, 5 September 2022, <em>5.1 Code: Console input</em> (P53 - 55)</li><li><a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/uart.c">xv6-riscv&#x2F;uart.c at riscv · mit-pdos&#x2F;xv6-riscv</a></li><li><a href="https://en.wikipedia.org/wiki/16550_UART">16550 UART - Wikipedia</a></li><li><a href="https://github.com/qemu/qemu/blob/master/hw/riscv/virt.c">qemu&#x2F;virt.c at master · qemu&#x2F;qemu</a></li><li><a href="https://www.qemu.org/docs/master/system/invocation.html#:~:text=parallel%20port%20data.-,%2Dnographic,-Normally%2C%20if%20QEMU">QEMU documentation –nographic</a></li><li><a href="https://www.cnblogs.com/weijunji/p/xv6-study-8.html">XV6学习（8）中断和设备驱动 - 星見遥 - 博客园</a></li><li><a href="https://en.wikipedia.org/wiki/Cross_compiler">Cross compiler - Wikipedia</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Operating System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Register</tag>
      
      <tag>xv6</tag>
      
      <tag>QEMU</tag>
      
      <tag>Peripheral</tag>
      
      <tag>UART</tag>
      
      <tag>Baud Rate</tag>
      
      <tag>Polling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RISC-V Machine Boot Code</title>
    <link href="/2023/02/23/boot-risc-v/"/>
    <url>/2023/02/23/boot-risc-v/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="RISC-V-Machine-Boot-Code"><a href="#RISC-V-Machine-Boot-Code" class="headerlink" title="RISC-V Machine Boot Code"></a>RISC-V Machine Boot Code</h1><p>Basically, when a RISC-V machine powers on, the bootloader built in hardware or emulator will go to memory address <a href="#Loading-Address"><code>0x8000_0000</code></a> to load an OS.</p><p>At this time, the computer works in <strong>machine</strong> mode, and our <code>boot.S</code> needs to do something that can only be done in this privilege level. And here is a line-by-line explanation.</p><h2 id="Some-Definitions"><a href="#Some-Definitions" class="headerlink" title="Some Definitions"></a>Some Definitions</h2><p>If you want, you can take a glance at <a href="#Code">code</a> first, and come back when encountering any problems.</p><h3 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h3><p>All keywords begin with a period are called <a href="https://sourceware.org/binutils/docs-2.40/as/Pseudo-Ops.html"><strong>directives</strong></a>. They are not defined in RISC-V specification, but in assembler’s side, to give some hints to assembler. Its syntax may be different from assembler to assembler, and it’s not corresponding to any specific instruction.</p><h3 id="Pseudoinstructions"><a href="#Pseudoinstructions" class="headerlink" title="Pseudoinstructions"></a>Pseudoinstructions</h3><p>Technically, <a href="https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md#-a-listing-of-standard-risc-v-pseudoinstructions"><strong>pseudoinstructions</strong></a> are not instruction. They resemble common instructions and are used to improve programming efficiency. One line of pseudo instruction may correspond to more than one instruction when assembled by assembler.</p><p>For example, <code>li</code> (<a href="https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md#load-immediate">load immediate</a>) is a common pseudoinstruction.</p><h3 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h3><p>ABI stands for <strong>application binary interface</strong>. Instead of naming registers’ absolute location, say, <code>x0</code>, <code>x1</code> and so on, it is highly recommended to refer them with their <a href="https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md#general-registers">ABI</a>, such as <code>zero</code>, <code>ra</code> and so on.</p><h3 id="CSR-and-Zicsr"><a href="#CSR-and-Zicsr" class="headerlink" title="CSR and Zicsr"></a>CSR and Zicsr</h3><p><strong>Control and status registers</strong> (CSR) are used to control and monitor the operation of various hardware components. They are part of privileged component in architechure, and thus, accessible by using different opcodes. These opcodes for CSRs are differently categorized and named as <strong>Zicsr</strong>.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs RISCV">.globl _start<br><br>.equ STACK_SIZE, 1024<br>.equ CPU_NUM, 8<br><br>.section .text<br><br>_start:<br>    csrr t0, mhartid<br>    bnez t0, pend<br><br>    slli t0, t0, 10<br>    la sp, stacks + STACK_SIZE<br>    add sp, sp, t0<br><br>    j enter<br><br>stacks:<br>    .space STACK_SIZE * CPU_NUM<br><br>pend:<br>    wfi<br>    j pend<br><br>.end<br></code></pre></td></tr></table></figure><h2 id="Branching-out-Other-Harts"><a href="#Branching-out-Other-Harts" class="headerlink" title="Branching out Other Harts"></a>Branching out Other Harts</h2><p><strong>Hart</strong> is a conventional name for a <strong>Hardware Thread</strong>. </p><p>In <em>line 9</em>, <code>csrr</code> is a <a href="#Pseudoinstructions">pseudoinstruction</a> meaning ‘read CSR’. You can simply understand it as ‘read <code>mhartid</code> and save into <code>t0</code>‘, but since <code>mhartid</code> is a <a href="#CSR-and-Zicsr">CSR</a>, it requires using <code>csrr</code>, which is also in Zicsr, to read it.</p><p><code>mhartid</code> can be understood as ‘machine mode hart id’. When hardware boots, all its harts are activated and run this assembly code, whereas this snippet is only intended to use one hart.</p><p><code>t0</code> is the first <a href="#ABI"><strong>temporary register</strong></a>, mapping to register <code>x5</code>.</p><p>In <em>line 10</em>, <code>bnez</code> is also a pseudoinstruction, standing for ‘branch if not equal to zero’.</p><p>So this two lines are trying to figure out which hart is running, and then lead it to the <code>pend</code> label, unless it is the first hart.</p><p>Let a hart jump endlessly is a common way to pend it. And in <em>line 22</em>, we added an instruction called <code>wfi</code>, meaning ‘wait for interrupt’. It could be seen as entering sleep mode for this hart.</p><h2 id="Setting-up-Stacks"><a href="#Setting-up-Stacks" class="headerlink" title="Setting up Stacks"></a>Setting up Stacks</h2><p>The layout of stacks is quite baffling and took me a lot of time to figure out.</p><p>In general, we assign a bunch of memory, let <code>sp</code> points to the end of first hart’s stack, and move <code>sp</code> to its corresponding hart’s stack, with respect to label <code>stacks</code>(<em>line 18-19</em>), <em>line 13</em> and <em>line 14</em> accordingly.</p><p>The stacks have a gross size of <code>STACK_SIZE * CPU_NUM</code> in bytes. The <a href="#Directives">directive</a> <code>.space</code> means fill these size with zeros automatically, the same as <code>.skip</code>. When <em>line 13</em> refers to <code>stacks</code>, it refers to the beginning, or in other words, smallest address of this assigned memory. By adding exactly one <code>STACK_SIZE</code>, the sum should be the end address of first hart’s stack.</p><p>Always remember these rules when trying to understand this part:</p><ol><li>The low address is the start of the stack, whereas the high address is its end.</li><li>The stack pointer <code>sp</code> always points to the end of the stack.</li><li>Hart id starts at 0.</li></ol><p>Since we designed the size of the stack to be 1024 bytes, which is 2<sup>10</sup>, we can left shift the hart ID 10 bits and add it to location of the first stack to find its own stack. <em>Line 12</em> is the instruction that exactly does this. The opcode <code>slli</code> instructs the hart to logical shift <code>t0</code> left, which also means multiplying it by 1024.</p><h2 id="Going-to-C"><a href="#Going-to-C" class="headerlink" title="Going to C"></a>Going to C</h2><p>In <em>line 16</em>, the program jumps to <code>enter</code> which is declared in C language. Calling a C function is just like calling an assembly function since they are both converted to binary and located in <code>text</code> section. When booting, quickly switching to high-level programming language can be helpful.</p><p>Initializing stacks can also be done in C. Referring to <a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/start.c"><code>xv6-riscv/kernel/start.c</code></a>, it is written as: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// entry.S needs one stack per CPU.</span><br>__attribute__ ((aligned (<span class="hljs-number">16</span>))) <span class="hljs-type">char</span> stack0[<span class="hljs-number">4096</span> * NCPU];<br></code></pre></td></tr></table></figure><p>Here <code>__attribute__</code> is a GNU GCC feature used to provide additional information to the compiler. In this case, it ensures that <code>stack0</code> is aligned on a 16-byte boundary. It gives each hart 4096 bytes and <code>NCPU</code> stands for the number of harts.</p><h2 id="Loading-Address"><a href="#Loading-Address" class="headerlink" title="Loading Address"></a>Loading Address</h2><p>Note that address <code>0x8000_0000</code> is different from so-called <em>magic number</em>, which is <code>0xAA55</code>, in x86. The latter is defined as the end of boot sector. BIOS would go through all storage devices and try to boot from this section.</p><p>Thus, when linking objects together, we need to add flag <code>-Ttext=0x80000000</code> to make sure the <code>.text</code> section is located at where we want. From the <a href="https://sourceware.org/binutils/docs-2.40/ld/Options.html#index-_002d_002dsection_002dstart_003dsectionname_003dorg">doc</a>, <code>-Ttext</code> here is a short hand for <code>--section-start=.text</code>.</p><p>This <code>8000_0000</code> is not standardized, but conventionally, it should be this location, as you can find out in QEMU source code. For example, in <a href="https://github.com/qemu/qemu/blob/master/hw/riscv/virt.c"><code>qemu/hw/riscv/virt.c</code></a>, in the array of memory map <code>virt_memap</code>, the last one is <code>VIRT_DRAM</code> and starts at <code>0x8000_0000</code>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://pdos.csail.mit.edu/6.828/2022/xv6/book-riscv-rev3.pdf">xv6: a simple, Unix-like teaching operating system</a>, Russ Cox, Frans Kaashoek, Robert Morris, MIT, 5 September 2022, <em>2.6 Code: starting xv6, the first process and system call</em> (P27 - 28)</li><li><a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/entry.S">xv6-riscv&#x2F;entry.S at riscv · mit-pdos&#x2F;xv6-riscv</a></li><li><a href="https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf">Writing a Simple Operating System – from Scratch</a>, Nick Blundell, University of Birmingham, 2 December 2010, <em>Chapter 2 Computer Architecture and the Boot Process</em> (P3 - 7)</li><li><a href="https://medium.com/@iotapioneer/55-and-aa-8c06b8719c1">55 and AA. What’s special about 55 and AA? Or more… | by Larry K. | Medium</a></li><li><a href="https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md">riscv-asm-manual&#x2F;riscv-asm.md at master · riscv-non-isa&#x2F;riscv-asm-manual</a></li><li><a href="https://sourceware.org/binutils/docs-2.40/as/Pseudo-Ops.html">Pseudo Ops (Using as)</a></li><li><a href="https://sourceware.org/binutils/docs-2.40/ld/Options.html">Options (LD)</a></li><li><a href="https://sourceware.org/binutils/docs-2.40/">Documentation for binutils 2.40</a></li><li><a href="https://www.bilibili.com/video/BV1Q5411w7z5?p=16">[完结] 循序渐进，学习开发一个RISC-V上的操作系统 - 汪辰 - 第7章（上）-Hello RVOS_哔哩哔哩_bilibili</a></li><li><a href="https://github.com/plctlab/riscv-operating-system-mooc/blob/main/code/os/01-helloRVOS/start.S">riscv-operating-system-mooc&#x2F;start.S at main · plctlab&#x2F;riscv-operating-system-mooc</a></li><li><a href="https://www.qemu.org/docs/master/system/target-riscv.html">RISC-V System emulator — QEMU documentation</a></li><li><a href="https://github.com/qemu/qemu/blob/master/hw/riscv/virt.c">qemu&#x2F;virt.c at master · qemu&#x2F;qemu</a></li><li><a href="https://riscv.org/technical/specifications/">Specifications - RISC-V International</a></li><li><a href="https://five-embeddev.com/riscv-isa-manual/latest/csr.html">RISC-V Instruction Set Manual, Volume I: RISC-V User-Level ISA | Five EmbedDev</a></li><li><a href="https://osblog.stephenmarz.com/ch1.html">Taking control of RISC-V: RISCV OS in Rust</a></li><li><a href="https://github.com/sgmarz/osblog/blob/master/risc_v/chapters/ch1/src/asm/boot.S">osblog&#x2F;boot.S at master · sgmarz&#x2F;osblog</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Operating System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>RISC-V</tag>
      
      <tag>Register</tag>
      
      <tag>xv6</tag>
      
      <tag>Memory</tag>
      
      <tag>Bootstrap</tag>
      
      <tag>Assembly</tag>
      
      <tag>Stack</tag>
      
      <tag>QEMU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随想两则</title>
    <link href="/2023/02/22/prose01/"/>
    <url>/2023/02/22/prose01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="随想两则"><a href="#随想两则" class="headerlink" title="随想两则"></a>随想两则</h1><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>最近悄悄给网站上线了 <a href="https://lingkkang.github.io/atom.xml">RSS</a>。</p><p>原本不怎么打算弄这个的，因为觉得这样回回直接把新内容直接推到订阅者面前，好像毛遂自荐一样，似乎很生硬。甚至感觉很唐突。</p><p>而且一直以为部署很麻烦的，没想到这么方便。</p><p>当然，最终还是弄了——主要是大家都加了，而且 RSS 阅读器能集成各个博客的源，读起来比专门去一个一个网站翻方便多了。也很少会有人专门去刷新别人网站看看有没有更新吧。</p><p>自己日常在用，怎么能有理由不加呢？</p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><p>之前用上了 ChatGPT，真的很惊艳。已经逐渐把它纳入日常信息搜索流中了。</p><p>直接问答还是比搜索和检索方便太多，尤其在于它能够结合上下文。而且得到答案之快速也基本胜过在论坛上提问了。尽管还是要记得验证一下它的答案。</p><p>以后会越来越如此吧。</p><p>感觉就像进入大学后逐渐习惯了 <code>ctrl + f</code> 的搜索快捷键，已经基本受不了再像以前一样凭肉眼扫描文本寻找关键字了。又好像习惯了搜索引擎，也很难习惯再像几十年前一样从百科全书、参考文献、索引里寻找线索，再在图书馆一排排书架上苦苦搜寻了吧。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Application of Cofactor Expansion</title>
    <link href="/2023/01/08/cofactor-expansion/"/>
    <url>/2023/01/08/cofactor-expansion/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Application-of-Cofactor-Expansion"><a href="#Application-of-Cofactor-Expansion" class="headerlink" title="Application of Cofactor Expansion"></a>Application of Cofactor Expansion</h1><p><a href="https://en.wikipedia.org/wiki/Laplace_expansion"><strong>Laplace expansion</strong></a>, also known as <strong>cofactor expansion</strong> or <strong>first Laplace theorems on determinants</strong>, is a recursive way to calculate determinant of a square matrix.</p><p>But it’s also clear that for a generic matrix, using <strong>cofactor expansion</strong> is much slower than using <a href="https://en.wikipedia.org/wiki/LU_decomposition">LU decomposition</a>. So, what’s the real advantage of Laplace expansion? In what kind of situation can we use this method?</p><p>To give a quick answer: when a matrix comes with many zeros.</p><p>Additionally, when a matrix constitutes some variables.</p><h2 id="From-the-Definition"><a href="#From-the-Definition" class="headerlink" title="From the Definition"></a>From the Definition</h2><p>Besides expressing the theorem with sigma notaion (Σ), there is also another equivalent form accroding to <em>Linear Algebra for Computational Sciences and Engineering</em>:</p><blockquote><p>The determinant of a matrix is equal to scalar product of a row (column) vector by the corresponding vector of cofactors.</p></blockquote><p>I rather like this definition.</p><h3 id="Being-Lazy"><a href="#Being-Lazy" class="headerlink" title="Being Lazy"></a>Being Lazy</h3><p>We can note that each term of summation is the product of a matrix entry and its cofactor.</p><p>So, it’s clear that if any of the two factors is zero, this term will be zero and we can calculate one thing less.</p><p>Although an entry’s cofactor needs some complex arithmetic, zero entries in a matrix can be easily determined.</p><h3 id="Handling-Some-Uncertainty"><a href="#Handling-Some-Uncertainty" class="headerlink" title="Handling Some Uncertainty"></a>Handling Some Uncertainty</h3><p>Thinking from the opposite, lower-upper decomposition is probably not completely applicable to a matrix with some variables. In this case, we cannot determine an entry is a pivot or not if it contain some unknowns. </p><p>At this point, cofactor expansion can help, but this is not the focus of this post.</p><h2 id="Real-Stuff"><a href="#Real-Stuff" class="headerlink" title="Real Stuff"></a>Real Stuff</h2><p>Let’s realize it in Python and check what outcome exactly could be when there are some zeros in a matrix.</p><h3 id="Reinvent-the-Wheel"><a href="#Reinvent-the-Wheel" class="headerlink" title="Reinvent the Wheel"></a>Reinvent the Wheel</h3><p>Firstly, we need to gengerate a square matrix randomly.</p><h4 id="Generate-a-Matrix"><a href="#Generate-a-Matrix" class="headerlink" title="Generate a Matrix"></a>Generate a Matrix</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_matrix_gen</span>(<span class="hljs-params">n, a, b, zeros=<span class="hljs-number">0</span></span>):<br>    m = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        row = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            entry = <span class="hljs-built_in">int</span>(random.uniform(a, b))<br>            <span class="hljs-keyword">if</span> entry == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> zeros == <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">while</span> (entry == <span class="hljs-number">0</span>):<br>                        entry = <span class="hljs-built_in">int</span>(random.uniform(a, b))<br>                <span class="hljs-keyword">if</span> zeros &gt; <span class="hljs-number">0</span>:<br>                    zeros = zeros -<span class="hljs-number">1</span><br>            row.append(entry)<br>        m.append(row)<br>    <span class="hljs-keyword">while</span> zeros != <span class="hljs-number">0</span>:<br>        i = <span class="hljs-built_in">int</span>(random.randrange(n))<br>        j = <span class="hljs-built_in">int</span>(random.randrange(n))<br>        <span class="hljs-keyword">if</span> m[i][j] != <span class="hljs-number">0</span>:<br>            m[i][j] = <span class="hljs-number">0</span><br>            zeros = zeros -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_matrix</span>(<span class="hljs-params">m</span>):<br>    n = <span class="hljs-built_in">len</span>(m)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-built_in">print</span>(m[i][j], end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>In <em>Line 8</em>, <code>int(random.uniform(lower, upper))</code> returns a value in continuous uniform distribution. Bounds <code>lower</code> and <code>upper</code> are not included since there is a type cast with <code>int()</code>.</p><p>Note that <code>0</code> is also in the bounds, so from <em>Line 9</em> to <em>Line 14</em> we are handling this problem, trying to make sure that the number of zeros in the returned matrix is exactly the same as <code>zeros</code> we passed in. This may demolish the idea of <em>uniform distribution</em>, but not impact the purpose of this demonstration.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">A = square_matrix_gen(<span class="hljs-number">3</span>, -<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>print_matrix(A)<br><br>B = square_matrix_gen(<span class="hljs-number">5</span>, -<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">4</span>)<br>print_matrix(B)<br></code></pre></td></tr></table></figure><p>Output (probably):</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TXT">-11     -9      -89<br>39      44      72<br>-96     -14     70<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TXT">-14     0       -99     47      0<br>0       7       18      85      -66<br>66      66      30      -4      4<br>-98     12      -83     20      0<br>-21     15      48      1       -93<br></code></pre></td></tr></table></figure><h4 id="Realization"><a href="#Realization" class="headerlink" title="Realization"></a>Realization</h4><p>To calculate determinant, according to <strong>cofactor expansion</strong>, we need cofactor. As for cofactor, we need complement minor, which comes from complement submatrix.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">det</span>(<span class="hljs-params">m</span>):<br>    n = <span class="hljs-built_in">len</span>(m)<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> ValueError<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    i = <span class="hljs-built_in">int</span>(random.randrange(n))<br>    summation = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> m[i][j] != <span class="hljs-number">0</span>:<br>            summation += m[i][j] * cofactor(m, i, j)<br>    <span class="hljs-keyword">return</span> summation<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cofactor</span>(<span class="hljs-params">m, i, j</span>):<br>    co = (-<span class="hljs-number">1</span>) ** (i + j) * complement_minor(m, i, j)<br>    <span class="hljs-keyword">return</span> co<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complement_minor</span>(<span class="hljs-params">m, i, j</span>):<br>    submatrix = complement_submatrix(m, i, j)<br>    minor = det(submatrix)<br>    <span class="hljs-keyword">return</span> minor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complement_submatrix</span>(<span class="hljs-params">m, i, j</span>):<br>    n = <span class="hljs-built_in">len</span>(m)<br>    sub = m[:i] + m[i+<span class="hljs-number">1</span>:]<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>        sub[x] = sub[x][:j] + sub[x][j+<span class="hljs-number">1</span>:]<br>    <span class="hljs-keyword">return</span> sub<br></code></pre></td></tr></table></figure><p>Complement minor is exactly the determinant of complement submatrix, so the sequence of function call expands in a recursive manner. </p><p>In <em>Line 7</em>, we selected a random row to apply <strong>first Laplace theorem</strong>. Note that all rows and columns begin with <code>0</code> index and end with <code>n-1</code>.</p><p>Function of complement submatrix is a little bit fancy. Essentially, it’s just a bunch of <a href="https://docs.python.org/3/tutorial/introduction.html#lists">list slicing</a>.</p><h3 id="Benchmarking"><a href="#Benchmarking" class="headerlink" title="Benchmarking"></a>Benchmarking</h3><blockquote><p>Cofactors are useful when matrices have many zeros.</p></blockquote><div style='text-align: right'><p>Gilbert Strang, <em>Introduction to Linear Algebra</em></p></div><p>To test its convenience, we can simply measure running time it used. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Num of zeros\tTime used&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">26</span>):<br>    m = square_matrix_gen(<span class="hljs-number">10</span>, -<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, i)<br>    t1 = datetime.now()<br>    det(m)<br>    t2 = datetime.now()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>\t\t<span class="hljs-subst">&#123;t2-t1&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">Num of zeros    Time used<br>10              0:00:04.076951<br>11              0:00:03.756362<br>12              0:00:02.944325<br>13              0:00:02.906601<br>14              0:00:02.848988<br>15              0:00:02.384444<br>16              0:00:02.215670<br>17              0:00:02.151262<br>18              0:00:02.014808<br>19              0:00:01.391330<br>20              0:00:01.436479<br>21              0:00:01.417628<br>22              0:00:01.162688<br>23              0:00:00.958879<br>24              0:00:01.125304<br>25              0:00:00.949000<br></code></pre></td></tr></table></figure><p>We can see that with the number of zeros in matrix increase, time needed to calculate <code>det()</code> is getting less rapidly.</p><p>Here is a result in terms of a 10 by 10 matrix with number of zeros ranging from 0 to 45, plotted with <code>matplotlib.pyplot</code> (for full script, please refer to <a href="#Appendix-Full-Script">Appendix</a>):</p><p><img src="/images/cofactor/Figure_1.png" alt="Figure 1"></p><p>From <em>Figure 1</em> we can see that only a few zeros can reduce calculation time to a large extend. </p><p>Here we just pick a random row to calculate <code>det()</code>, and if we chose a row (column) with the most zeros, the time might have been reduced even faster.</p><h2 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h2><p>When learning linear algebra and going through the textbook, tons of jargons come in, with many definitions, theorems, proofs and properties. But as a student major in computer science, I really want to know what’s the usage of them, in what circumstances can we use them. I care more about real-life application and realization. </p><p>In terms of <strong>cofactor expansion</strong>, to calculate determinant recursively is a fun topic, but not a very efficient manner, as recursion always occupy a large amount of memory and hard to optimize. </p><p>So does almost every industrial implementation of determinant come from <strong>LU decomposition</strong>. </p><p>However, <strong>Laplace expansion</strong> is not meaningless, and that’s why I wrote this post.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://doi.org/10.1007/978-3-030-21321-3">Linear Algebra for Computational Sciences and Engineering, 2nd Edition</a>, Ferrante Neri, Springer Cham, 2019.</li><li><a href="https://math.mit.edu/~gs/linearalgebra/ila5/indexila5.html">Introduction to Linear Algebra, 5th Edition</a>, Gilbert Strang, Wellesley-Cambridge Press, 2016.</li><li><a href="https://textbooks.math.gatech.edu/ila/determinants-cofactors.html">Cofactor Expansions</a></li><li><a href="https://en.wikipedia.org/wiki/Laplace_expansion">Laplace expansion - Wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Minor_(linear_algebra)#Applications_of_minors_and_cofactors">Applications of minors and cofactors</a></li><li><a href="https://en.wikipedia.org/wiki/LU_decomposition">LU decomposition - Wikipedia</a></li><li><a href="https://johnfoster.pge.utexas.edu/numerical-methods-book/LinearAlgebra_LU.html">LU Factorization</a></li><li><a href="https://docs.python.org/3/library/stdtypes.html?highlight=list#mutable-sequence-types">Mutable Sequence Types - Built-in Types - Python 3.11.1 documentation</a></li><li><a href="https://numpy.org/doc/stable/reference/generated/numpy.linalg.det.html">numpy.linalg.det — NumPy v1.24 Manual</a></li></ol><h2 id="Appendix-Full-Script"><a href="#Appendix-Full-Script" class="headerlink" title="Appendix: Full Script"></a>Appendix: Full Script</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_matrix_gen</span>(<span class="hljs-params">n, a, b, zeros=<span class="hljs-number">0</span></span>):<br>    m = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        row = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            entry = <span class="hljs-built_in">int</span>(random.uniform(a, b))<br>            <span class="hljs-keyword">if</span> entry == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> zeros == <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">while</span> (entry == <span class="hljs-number">0</span>):<br>                        entry = <span class="hljs-built_in">int</span>(random.uniform(a, b))<br>                <span class="hljs-keyword">if</span> zeros &gt; <span class="hljs-number">0</span>:<br>                    zeros = zeros -<span class="hljs-number">1</span><br>            row.append(entry)<br>        m.append(row)<br>    <span class="hljs-keyword">while</span> zeros != <span class="hljs-number">0</span>:<br>        i = <span class="hljs-built_in">int</span>(random.randrange(n))<br>        j = <span class="hljs-built_in">int</span>(random.randrange(n))<br>        <span class="hljs-keyword">if</span> m[i][j] != <span class="hljs-number">0</span>:<br>            m[i][j] = <span class="hljs-number">0</span><br>            zeros = zeros -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_matrix</span>(<span class="hljs-params">m</span>):<br>    n = <span class="hljs-built_in">len</span>(m)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-built_in">print</span>(m[i][j], end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">det</span>(<span class="hljs-params">m</span>):<br>    n = <span class="hljs-built_in">len</span>(m)<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> ValueError<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    i = <span class="hljs-built_in">int</span>(random.randrange(n))<br>    summation = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> m[i][j] != <span class="hljs-number">0</span>:<br>            summation += m[i][j] * cofactor(m, i, j)<br>    <span class="hljs-keyword">return</span> summation<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cofactor</span>(<span class="hljs-params">m, i, j</span>):<br>    co = (-<span class="hljs-number">1</span>) ** (i + j) * complement_minor(m, i, j)<br>    <span class="hljs-keyword">return</span> co<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complement_minor</span>(<span class="hljs-params">m, i, j</span>):<br>    submatrix = complement_submatrix(m, i, j)<br>    minor = det(submatrix)<br>    <span class="hljs-keyword">return</span> minor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complement_submatrix</span>(<span class="hljs-params">m, i, j</span>):<br>    n = <span class="hljs-built_in">len</span>(m)<br>    sub = m[:i] + m[i+<span class="hljs-number">1</span>:]<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>        sub[x] = sub[x][:j] + sub[x][j+<span class="hljs-number">1</span>:]<br>    <span class="hljs-keyword">return</span> sub<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timedelt_to_seconds</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-keyword">return</span> t.seconds + t.microseconds / <span class="hljs-number">1000000</span><br><br>index = []<br>time = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">46</span>):<br>    m = square_matrix_gen(<span class="hljs-number">10</span>, -<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, i)<br>    t1 = datetime.now()<br>    det(m)<br>    t2 = datetime.now()<br>    tdelt = t2 - t1<br>    time.append(timedelt_to_seconds(tdelt))<br>    index.append(i)<br><br><span class="hljs-keyword">for</span> xy <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([index[<span class="hljs-number">0</span>], index[-<span class="hljs-number">1</span>]], [time[<span class="hljs-number">0</span>], time[-<span class="hljs-number">1</span>]]):<br>    <span class="hljs-comment"># draw coordinates of the first and last points</span><br>    plt.annotate(<span class="hljs-string">&#x27;(%d, %.2f)&#x27;</span> % xy, xy=xy)<br><br>plt.plot(index, time, <span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;For a 10 by 10 matrix&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Zeros in matrix&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Time used to calculate det (in seconds)&#x27;</span>)<br>plt.xlim([-<span class="hljs-number">2</span>, <span class="hljs-number">55</span>])<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Connect to Local Machine in Hyper-V with SSH</title>
    <link href="/2022/12/31/ssh-hyper-v/"/>
    <url>/2022/12/31/ssh-hyper-v/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Connect-to-Local-Machine-in-Hyper-V-with-SSH"><a href="#Connect-to-Local-Machine-in-Hyper-V-with-SSH" class="headerlink" title="Connect to Local Machine in Hyper-V with SSH"></a>Connect to Local Machine in Hyper-V with SSH</h1><h2 id="After-Boot"><a href="#After-Boot" class="headerlink" title="After Boot"></a>After Boot</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip address<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status sshd<br>sudo systemctl start sshd<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://wiki.archlinux.org/title/OpenSSH">OpenSSH - ArchWiki</a></li><li><a href="https://superuser.com/questions/681213/how-to-connect-to-a-local-hyper-v-virtual-machine-via-ssh">linux - How to connect to a local hyper-v virtual machine via SSH? - Super User</a></li><li><a href="https://linuxhint.com/arch_linux_ssh_server/">Arch Linux SSH Server Setup, Customization and Optimization</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>Hyper-V</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Malloc Failure with Macros</title>
    <link href="/2022/12/07/test-malloc-failure/"/>
    <url>/2022/12/07/test-malloc-failure/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Test-Malloc-Failure-with-Macros"><a href="#Test-Malloc-Failure-with-Macros" class="headerlink" title="Test Malloc Failure with Macros"></a>Test Malloc Failure with Macros</h1><p>We already know that if <code>malloc()</code> failed, it will return <code>NULL</code>, so almost every <code>C</code> programmer would write the following snippet in their code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *<span class="hljs-built_in">string</span> = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span> == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// do something ...</span><br></code></pre></td></tr></table></figure><p>However, if we want to do something else if the reture value is <code>NULL</code> for memory allocation? It is easy to put some code into it (i.e., <strong>line 3</strong> of above snippet), but the real problem is, how can we test this part?</p><p>To make sure the robustness of our program, every part of the code should be massively tested. But it is almost impossible for us to run out of memory manually, we need some technique to emulate allocation failure.</p><p>And here is the way.</p><h2 id="Handle-malloc"><a href="#Handle-malloc" class="headerlink" title="Handle malloc()"></a>Handle <code>malloc()</code></h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>Take a quick look at the code and I will explain them later.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> set_null = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">my_malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> n)</span> &#123;<br>    set_null += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (set_null == <span class="hljs-number">497</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(n);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> malloc(x) my_malloc(x)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file_to_test.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> malloc</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    function_to_test();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p>Firstly, we need some basic knowledge of <strong>preprocessor</strong> and <strong>macro</strong> in c.</p><p>Don’t worry, in this context, they could be simply recognized as some kind of <strong>replacement</strong>. The essence is to replace the standard <code>malloc</code> function to a function defined by us, say <code>my_malloc</code>, so that we can make it return <code>NULL</code> if we want.</p><p>So in <strong>line 13</strong>, we specify that we want to replace the standard <code>malloc()</code> with our <code>my_malloc()</code>, and the parameter <code>x</code> is just a placeholder to tell compiler that we only have one argument to pass to the macro.</p><p>And secondly, we <code>include</code> our source code into our file. Note that we do not ‘close’ our macro (i.e., <code>undef</code>), so every time <code>malloc()</code> occurs in <code>file_to_test.h</code>, what actually called is our <code>my_malloc()</code> function.</p><p>Next step, we undefine <code>malloc</code>, which means give control to real <code>malloc</code> function. So for every code after this line, when compiler encounter a <code>malloc()</code>, it calls the genuine one.</p><p>Note that we define our <code>my_maclloc()</code> function before the macro, so in <strong>line 10</strong>, real <code>malloc()</code> is called.</p><p>Also, we need a way to decide when should our fake malloc should return <code>NULL</code>. We can have a global variable to track it, and when it fullfills some condition, function returns <code>NULL</code>.</p><p>At this point, you may have know that there are almost countless ways to do this. We can take modulo of it, use random function and so on. Here I simply check it’s value, and we can fake a allocation failure at anywhere we want.</p><h2 id="Handle-realloc"><a href="#Handle-realloc" class="headerlink" title="Handle realloc()"></a>Handle <code>realloc()</code></h2><p>Similar to <code>malloc()</code>, <code>realloc</code> can be replace with our own function, but it’s a little bit trickier.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> set_null = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">my_realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> n)</span> &#123;<br>    set_null += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (set_null == <span class="hljs-number">223</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">realloc</span>(ptr, n);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> realloc(a, b) my_realloc(a, b)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;file_to_test.c&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> realloc</span><br></code></pre></td></tr></table></figure><p>Note that the common usage of <code>realloc</code> is <code>ptr_a = realloc(ptr_b, new_size);</code> If this reallocation failed, <code>ptr_a</code> is set to <code>NULL</code>, but <code>ptr_b</code> is remaining unchanged.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> *<span class="hljs-title function_">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> new_size)</span>;<br></code></pre></td></tr></table></figure><p>Accroding to the <a href="https://en.cppreference.com/w/c/memory/realloc">documentation of <code>realloc</code></a>, original memory is never changed.</p><blockquote><p>If there is not enough memory, the old memory block is not freed and null pointer is returned.</p></blockquote><p>So in our simulation, <code>ptr_a</code> also remains unchanged.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> set_null = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">my_realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> n)</span> &#123;<br>    set_null += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (set_null == <span class="hljs-number">223</span>) &#123;<br>        <span class="hljs-built_in">free</span>(ptr); <span class="hljs-comment">// don&#x27;t do this!</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">realloc</span>(ptr, n);<br>&#125;<br></code></pre></td></tr></table></figure><p>Otherwise, you may pass your test but still get a memory leak when realloc failure occurs.</p><h2 id="Remark-on-realloc"><a href="#Remark-on-realloc" class="headerlink" title="Remark on realloc()"></a>Remark on <code>realloc()</code></h2><p>Additionally, never do something like <code>ptr_a = realloc(ptr_a, new_size);</code> In this case, if real reallocation occurs, <code>ptr_a</code> would be set to <code>NULL</code>, whereas the memory location pointed by <code>ptr_a</code> is still there. The compiler is not intelligent enough to <code>free(ptr_a)</code> before assignment. Thus, we lose the access to original memory, and eventually we will receive a memory leak. </p><p>So always do like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">temp = <span class="hljs-built_in">realloc</span>(ptr_a, new_size);<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-comment">// handle realloc failure</span><br>&#125;<br>ptr_a = temp;<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://stackoverflow.com/questions/1986538/how-to-handle-realloc-when-it-fails-due-to-memory">How to handle realloc when it fails due to memory? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/74711886/how-to-test-malloc-failure-in-c">How to test malloc failure in C? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/1607004/does-realloc-free-the-former-buffer-if-it-fails">Does realloc free the former buffer if it fails? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/1986538/how-to-handle-realloc-when-it-fails-due-to-memory">c - How to handle realloc when it fails due to memory? - Stack Overflow</a></li><li><a href="https://en.cppreference.com/w/cpp/preprocessor/replace">Replacing text macros - cppreference.com</a></li><li><a href="https://www.scaler.com/topics/c/macros-in-c/">Macros in C | Types and Examples - Scaler Topics</a></li><li><a href="https://gcc.gnu.org/onlinedocs/gcc-3.2.3/cpp/Macro-Arguments.html">The C Preprocessor</a></li><li><a href="https://learn.microsoft.com/en-us/cpp/preprocessor/hash-undef-directive-c-cpp">#undef directive (C&#x2F;C++) | Microsoft Learn</a></li><li><a href="https://www.programiz.com/c-programming/c-preprocessor-macros">C Preprocessor and Macros</a></li><li><a href="https://en.cppreference.com/w/c/memory/realloc">realloc - cppreference.com</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Software Engineering</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Memory</tag>
      
      <tag>Dynamic Memory Allocation</tag>
      
      <tag>Robustness</tag>
      
      <tag>Testing</tag>
      
      <tag>C Macro</tag>
      
      <tag>C Preprocessor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Advanced Concatenate with Sqlite3</title>
    <link href="/2022/10/27/concat/"/>
    <url>/2022/10/27/concat/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Advanced-Concatenate-with-Sqlite3"><a href="#Advanced-Concatenate-with-Sqlite3" class="headerlink" title="Advanced Concatenate with Sqlite3"></a>Advanced Concatenate with Sqlite3</h1><p><code>CONCATENATE()</code> is a useful function which can be found in <code>Excel</code>, <code>numpy</code>, etc. It could be simply interpreted as <strong>adding</strong> two or more strings together. The concatenate operator <code>||</code> could be used to add strings in SQL, but only use <code>||</code> can not satisfy us in much complicated context, i.e., string separated across columns. But as a powerful database manage system, Sqlite3 (and probably other DBMS) allows us to do this advanced <code>CONCATENATE</code>, even though there is no keyword or function written as <strong>CONCATENATE</strong> in SQL. </p><h2 id="Quick-Sample"><a href="#Quick-Sample" class="headerlink" title="Quick Sample"></a>Quick Sample</h2><h3 id="Create-Sample-Table"><a href="#Create-Sample-Table" class="headerlink" title="Create Sample Table"></a>Create Sample Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> Alphabet (<br>    ID <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    Letter <span class="hljs-type">CHAR</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p>And insert values as follows: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Alphabet (Letter)<br><span class="hljs-keyword">VALUES</span> <br>    (<span class="hljs-string">&#x27;A&#x27;</span>), (<span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-string">&#x27;C&#x27;</span>), (<span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-string">&#x27;E&#x27;</span>),<br>    (<span class="hljs-string">&#x27;F&#x27;</span>), (<span class="hljs-string">&#x27;G&#x27;</span>), (<span class="hljs-string">&#x27;H&#x27;</span>), (<span class="hljs-string">&#x27;I&#x27;</span>), (<span class="hljs-string">&#x27;J&#x27;</span>);<br></code></pre></td></tr></table></figure><p>So if now we select all entries from <code>Alphabet</code>, </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL">.head <span class="hljs-keyword">on</span><br><br>.mode <span class="hljs-keyword">column</span> <span class="hljs-comment">-- make output more readable</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Alphabet;<br></code></pre></td></tr></table></figure><p>the output should look like this: </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">ID  Letter<br>--  ------<br>1   A     <br>2   B     <br>3   C     <br>4   D     <br>5   E     <br>6   F     <br>7   G     <br>8   H     <br>9   I     <br>10  J     <br></code></pre></td></tr></table></figure><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Print a single string containing all the letters in ascending order, and letters are separated by one comma and one space.   </p><h3 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h3><p>So by means of <strong>CONCATENATE</strong>, we want to output some stuff like <code>A, B, C, D, E, F, G, H, I, J</code>. Since <code>Letter</code>s are stored in column, it does not work if we only use concatenate operator <code>||</code>. </p><p>The requirement sounds difficult, but if you see codes below, there is nothing too mysterious actually. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">WITH</span> CTE <span class="hljs-keyword">AS</span> (<br>    <span class="hljs-keyword">SELECT</span><br>        ID,<br>        Letter<br>    <span class="hljs-keyword">FROM</span><br>        Alphabet<br>    <span class="hljs-keyword">WHERE</span><br>        ID <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">UNION</span><br><br>    <span class="hljs-keyword">SELECT</span><br>        Alphabet.ID,<br>        CTE.Letter <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;, &#x27;</span> <span class="hljs-operator">||</span> Alphabet.Letter<br>    <span class="hljs-keyword">FROM</span><br>        Alphabet<br>    <span class="hljs-keyword">JOIN</span><br>        CTE <span class="hljs-keyword">ON</span> Alphabet.ID <span class="hljs-operator">=</span> CTE.ID <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>)<br><br><span class="hljs-keyword">SELECT</span><br>    Letter<br><span class="hljs-keyword">FROM</span><br>    CTE<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    ID <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p>Firstly, we need to create a helper table <code>CTE</code>, which stands for <em>Common Table Expression</em>. The first row of <code>CTE</code> is the first row of <code>Alphabet</code>, this is where our story begins. </p><p>Next step is simple, we just need to add new lines into it, and for each line, it’s <code>Letter</code> is the concat of previous line (in <code>CTE</code>) and previous letter (in <code>Alphabet</code>). </p><p>In <em>line 17</em>, it seems like we <code>JOIN</code> the <code>CTE</code> to itself, and here is explanation. We actually <code>JOIN</code> the newly generated line to the previous line, and you don’t need to worry about <code>ID</code> exceeding boundary. Don’t confuse it with <a href="https://www.sqlitetutorial.net/sqlite-self-join/">Self-Join</a>. It is another topic and out of scope of this blog. </p><p>Note that in <em>line 18</em>, it’s <code>Alphabet.ID = CTE.ID + 1</code>, and this <code>+ 1</code> is very important. Without it, the query goes infinitely, and actually generate something like <code>A, A, A, A, A, A, ...</code> endlessly. </p><p>And we use <code>UNION</code> to combine two selected table. </p><p>So if you check what <code>CTE</code> really generate, execute query: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">WITH</span> CTE <span class="hljs-keyword">AS</span> (<br>    ...<br>    <span class="hljs-comment">-- same as above</span><br>)<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> CTE;<br></code></pre></td></tr></table></figure><p>And the output is surprisingly clear. </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">ID  Letter                      <br>--  ----------------------------<br>1   A                           <br>2   A, B                        <br>3   A, B, C                     <br>4   A, B, C, D                  <br>5   A, B, C, D, E               <br>6   A, B, C, D, E, F            <br>7   A, B, C, D, E, F, G         <br>8   A, B, C, D, E, F, G, H      <br>9   A, B, C, D, E, F, G, H, I   <br>10  A, B, C, D, E, F, G, H, I, J<br></code></pre></td></tr></table></figure><p>This output may to large extent help you understand how this query works. </p><p>The final step is just to sort them and output the line we want. </p><h2 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h2><p>This is just like doing query recursivly, and Sqlite3 started supporting <code>RECURSIVE</code> keyword since version 3.34.0. <a href="https://sqlite.org/lang_with.html">Read more</a>. </p><p>In real implementation, probably there is no consecutive <code>ID</code> and you may think of using a window function <code>ROW_NUMBER()</code> to help you. </p><p>Furthermore, this piece of SQL could be re-used every time you want to concatenate items cross different rows. It can be used as a fixed pattern only with minor modification. </p><h2 id="Much-More-Complicated-Ones"><a href="#Much-More-Complicated-Ones" class="headerlink" title="Much More Complicated Ones"></a>Much More Complicated Ones</h2><p>There are some more complex questions from <a href="https://15445.courses.cs.cmu.edu/">CMU 15-445&#x2F;645 :: Intro to Database Systems</a>. In its homework 1, many questions are quite demanding, and <strong>Q10</strong> is always linked to this blog’s topic. </p><h3 id="2022-Fall-Q10"><a href="#2022-Fall-Q10" class="headerlink" title="2022 Fall Q10"></a>2022 Fall Q10</h3><p><a href="https://15445.courses.cs.cmu.edu/fall2022/homework1/">Homework #1 - SQL</a> <strong>Question 10</strong> with <a href="https://15445.courses.cs.cmu.edu/fall2022/files/hw1-sols.zip">official solution</a>, and my code can be found <a href="https://github.com/LingkKang/CMU15-445_fa22/blob/master/hw1_SQL/q10_house_of_the_dragon.sql">here</a>. </p><h3 id="2021-Fall-Q10"><a href="#2021-Fall-Q10" class="headerlink" title="2021 Fall Q10"></a>2021 Fall Q10</h3><p><a href="https://15445.courses.cs.cmu.edu/fall2021/homework1/">Homework #1 - SQL</a> <strong>Question 10</strong> with <a href="https://15445.courses.cs.cmu.edu/fall2021/files/hw1_sol.zip">official solution</a>, and my code can be found <a href="https://github.com/LingkKang/CMU15-445_fa22/blob/master/history_hw/fa21_hw1_SQL/q10_christmas.sql">here</a>. </p><p>Although added many other requirements and combined with other concepts, the essence never got changed. </p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>SQLite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>University 100 Miles Relay Competition 2022 Fall</title>
    <link href="/2022/10/23/100miles/"/>
    <url>/2022/10/23/100miles/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="高百-2022-秋"><a href="#高百-2022-秋" class="headerlink" title="高百 2022 秋"></a>高百 2022 秋</h1><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>最原本说参加高校百英里是将近半年前了。当时讲了很久最终因为人数差一人没能成行，后面的跑量赛也因为暑假，大家都散开了没了下文。</p><p>新学期来了许多大一的同学，报了名之后不仅人数到了，甚至刚好三十人满编。操场上前前后后能看到有这么多人在一起跑真是蛮让人感慨的，甚至有一些些感动。</p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><p>最近几次跑步都有一种体验，一种“跟住”的体验。许多经常在跑的人都会有自己跑步的节奏，这样的节奏经过大跑量的测试，一般都很靠谱，当然也很私人化。然后像我这样没怎么跑过 10 公里的人，可以在别人后面跟着这种节奏，算是一种投机取巧吧。不同的人节奏也不一样，有的人很稳重，有的人跟起来像是在飞……</p><p>当然很难一直跟住一个人，这回也被套圈了许多许多次，但体验是非比寻常的。不同于一个人在操场或在公园跑，许多人在跑的环境也能激发起一些些胜负欲。这次的氛围更是热烈许多。如此多的人在为我们加油鼓掌，还有人递水。这些都让我很感动。谢谢你们每一个人！</p><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><p>这次也刚好又是五公里和十公里都突破了 PB。许多人都是如此吧，这样热烈的氛围有不少加成呢。跑的时候一直想着 “The best is always yet to come”，“最好的总是即将到来”。尽管五六公里时主观体感很糟糕，甚至有些岔气，但最终结果还是比上一次快了一些。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Binary Tree in Python</title>
    <link href="/2022/08/30/Binary-Tree-in-Python/"/>
    <url>/2022/08/30/Binary-Tree-in-Python/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Binary-Tree-in-Python"><a href="#Binary-Tree-in-Python" class="headerlink" title="Binary Tree in Python"></a>Binary Tree in Python</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A binary tree might be the simplest tree data structure. It only have three attributes: the value of the node, its left and right child node. If its child node is <code>None</code>, this child node do not have value or child nodes anymore. </p><p>Here is the definition of a typical binary tree from LeetCode: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br></code></pre></td></tr></table></figure><p>Similar to linked list, binary tree is also a one direction data type. Once moved to its child node, there is no way to trace back, except going through it from the head node again. </p><p>In LeetCode, the <code>input</code> is a list-like binary tree, which is probably difficult to understand at the first glance. For example, inputs wirtten as <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]</code> and <code>[1, 2, 3, 4, 5, null, 7, 8, 9, 10, 11, 12]</code> should be interpretered as image below. </p><p><img src="/../images/binary_tree/bt.png" alt="Image created in XMind"></p><p>It is not extremely significant, however, since we just need to cope with its attributes in our implementation. </p><h2 id="Binary-Tree-Inorder-Traversal"><a href="#Binary-Tree-Inorder-Traversal" class="headerlink" title="Binary Tree Inorder Traversal"></a>Binary Tree Inorder Traversal</h2><p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">94. Binary Tree Inorder Traversal (Easy)</a></p><p>This problem is really a great intro to the understandment of binary tree. It require atraversal of given binary tree. </p><p>By inspecting the <code>output</code>, it should be implemented in depth first search (DFS), with left child node searched first. This sounds like nonsense as the <code>input</code> is given layer by layer. But this really confused me at very first. </p><p>Unquestionably, this problem could be solved by recursion. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Recursive Solution</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">lis, tree</span>):<br>            <span class="hljs-keyword">if</span> tree:<br>                re(lis, tree.left) <span class="hljs-comment"># Go to its left child node</span><br>                lis.append(tree.val)<br>                re(lis, tree.right) <span class="hljs-comment"># Go to its right child node</span><br>            <span class="hljs-keyword">return</span> lis<br>        <span class="hljs-keyword">return</span> re([], root)<br></code></pre></td></tr></table></figure><p>Don’t need to worry about what if it’s <code>left</code> or <code>right</code> attribute is null, it would pass in next function call. </p><!-- Since it could be done by recursion, it could also be done by iteration.  --><h2 id="Some-Similar-Questions"><a href="#Some-Similar-Questions" class="headerlink" title="Some Similar Questions"></a>Some Similar Questions</h2><h3 id="Same-Tree"><a href="#Same-Tree" class="headerlink" title="Same Tree"></a>Same Tree</h3><p>We can apply similar logic to the question <a href="https://leetcode.com/problems/same-tree/">100. Same Tree (Easy)</a>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSameTree</span>(<span class="hljs-params">self, p: <span class="hljs-type">Optional</span>[TreeNode], q: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">t1, t2</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t1 <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> t2:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> t1 <span class="hljs-keyword">and</span> t2:<br>                <span class="hljs-keyword">if</span> t1.val != t2.val:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> re(t1.left, t2.left):<br>                    <span class="hljs-keyword">return</span> re(t1.right, t2.right)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> re(p, q)<br></code></pre></td></tr></table></figure><h3 id="Symmetric-Tree"><a href="#Symmetric-Tree" class="headerlink" title="Symmetric Tree"></a>Symmetric Tree</h3><p>And the question <a href="https://leetcode.com/problems/symmetric-tree/">101. Symmetric Tree (Easy)</a>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSymmetric</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">t1, t2</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t1 <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> t2:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> t1 <span class="hljs-keyword">and</span> t2:<br>                <span class="hljs-keyword">if</span> t1.val != t2.val:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> re(t1.left, t2.right):<br>                    <span class="hljs-keyword">return</span> re(t1.right, t2.left)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> re(root.left, root.right)<br></code></pre></td></tr></table></figure><h3 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree"></a>Maximum Depth of Binary Tree</h3><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">104. Maximum Depth of Binary Tree (Easy)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">t</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            left_depth = re(t.left)<br>            right_depth = re(t.right)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left_depth, right_depth) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> re(root)<br></code></pre></td></tr></table></figure><p>Recursion is probably the simplist way to manage a binary tree, and there is no waste on calculating same base cases.</p><h3 id="Balanced-Binary-Tree"><a href="#Balanced-Binary-Tree" class="headerlink" title="Balanced Binary Tree"></a>Balanced Binary Tree</h3><p><a href="https://leetcode.com/problems/balanced-binary-tree/">110. Balanced Binary Tree (Easy)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isBalanced</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_length</span>(<span class="hljs-params">a</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> a:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            left_depth = get_length(a.left)<br>            right_depth = get_length(a.right)<br>            l = <span class="hljs-built_in">max</span>(left_depth, right_depth) + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> l<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">t</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            left_len = get_length(t.left)<br>            right_len = get_length(t.right)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(left_len - right_len) &gt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> re(t.left):<br>                <span class="hljs-keyword">return</span> re(t.right)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> re(root)<br></code></pre></td></tr></table></figure><p>Here, for the first time, comes some waste calculation.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">Binary Tree Inorder Traversal - LeetCode</a></li><li><a href="https://leetcode.com/explore/learn/card/data-structure-tree/">Introduction to Data Structure - Binary Tree - LeetCode</a></li><li><a href="http://composingprograms.com/pages/23-sequences.html#trees">Trees - Composing Programs</a></li><li><a href="https://www.cs.cmu.edu/~clo/www/CMU/DataStructures/Lessons/lesson4_1.htm">Tree Data Structure</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Algorithms &amp; Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tree</tag>
      
      <tag>Binary Tree</tag>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bumi mana yang tak ditimpa hujan</title>
    <link href="/2022/08/24/Hujan/"/>
    <url>/2022/08/24/Hujan/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="没长草的地方就是路"><a href="#没长草的地方就是路" class="headerlink" title="没长草的地方就是路"></a>没长草的地方就是路</h1><blockquote><p>Laut mana yang tak berombak, bumi mana yang tak ditimpa hujan. </p><p>大海何处不起浪，大地何处未遭雨。</p></blockquote><p>刚把黄锦树的《雨》看完。正好这几天一直时雨时停，仿佛在应和书里多雨的热带胶园。</p><p>还记得刚开始看的时候也是多雨的时节，只不过当时雨越下，天越热；现在两个月后，雨下着总能凉爽一些。</p><div class="note note-success">            <p>文中所有引用均来自黄锦树的《雨》，书名号内为具体篇名。</p>          </div><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><blockquote><p>但那些梦并没有消失，即使是在做梦的人死后。它们变成了杂草的种子，随风飘散，当然也不曾记得自己曾经是梦，也就跟一般的杂草种子没什么两样了。</p><p>雨后，大地处处重新长起了杂草。<br>《拿督公》</p></blockquote><p>这一篇太沉重了。</p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><blockquote><p>离乡出国之后就再没回去，不料这地方好像没什么变。好像这空间有它自己专属的时间。</p><p>《龙舟》</p></blockquote><p>忽然回想起上次路过校园。</p><p>那次带着同学在市区散步觅食，天还不太热，慢慢走出去很远才微微出汗。一路上路过了小学，初中。从围墙外望进去，操场、教学楼、体育馆······几乎一切都没什么变化，与印象里不同的几个篮球架好像还是刚毕业那年才翻新过。</p><blockquote><p>变化也许不可避免地发生着，但有一堵无形的墙让它变慢了。</p><p>《仿佛穿过林子便是海》</p></blockquote><p>时隔也没几年吧，但看到时间停滞的校园总还有些惊讶。总会想起那个时候在校门口挤着买烤串、生煎包。尽管那家店里很油腻，但每次也就只吃几个，总能在吃腻之前踏离拥挤的门面。</p><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><p>挺喜欢《老虎，老虎》这一篇。</p><blockquote><p>雨声充塞于天地之间。雨下满了整个夜。无边无际，也仿佛无始无终的。</p><p>《老虎，老虎》</p></blockquote><p>记忆中似乎也有零星几个夜晚，被大雨淋在窗户的嘀嗒声吵醒。恍惚之间似乎世界都只剩雨声，大得好像大禹来不及治水，诺亚方舟也被冲垮。</p><p>后来渐渐享受起雨声来，有时也会特地找下雨的白噪音给生活伴奏。似乎不单单是享受雨声，更是享受大雨时身有庇护的感觉吧。</p><p>可故事里就没有这么舒适了。</p><p>大雨滂沱，辛一家也没了活干，只能在家干等——原本的早起割胶无法在大雨中进行，割出的胶被雨稀释就卖不出好价钱。</p><p>辛很喜欢老虎，但母亲很怕。</p><p>也许老虎就是祖父吧？当辛闻见祖父的味道时，眼前也总有老虎的身影从门缝划过。辛因闻到味道而问起是否是祖父来了时，母亲总会脸色剧变。对于母亲来说，祖父不是什么美好的回忆，她害怕厌恶祖父就像她害怕厌恶老虎。</p><p>但后来大雨依旧，老虎最终出现在了辛的家门口。</p><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2><p>重读了《仿佛穿过林子便是海》。感觉朦朦胧胧的，许多个“她”的影子叠加在一起。或许生命中印象深刻的并不一定是熟知的人吧，也许是某个偶然的场景，也许也会有梦境。</p><p>奇怪的是，书中女孩的代词大部分时候是“她”，但又会有偶尔是“伊”。似乎是在“她”已经占用后，会用“伊”指代另一位女性，但又似乎并不是这样，有些让人不知所措。</p><p>穿过林子便是海吗？</p><blockquote><p>你还不懂得时间的微妙。它不是只会流逝，还会回卷，像涨潮时的浪。</p><p>《仿佛穿过林子便是海》</p></blockquote><p>终于看到海了，不仅是涨落的涛声。</p><p>但最终无法触及。</p><blockquote><p>潮水已退到远方，深色的礁石裸露，像一片天然的废墟。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linked List with Python Built-in List</title>
    <link href="/2022/08/18/Linked-List-with-Python-Built-in-List/"/>
    <url>/2022/08/18/Linked-List-with-Python-Built-in-List/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Linked-List-with-Python-Built-in-List"><a href="#Linked-List-with-Python-Built-in-List" class="headerlink" title="Linked List with Python Built-in List"></a>Linked List with Python Built-in List</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>I was currently reading the <a href="http://composingprograms.com/">Composing Programs</a>, which amazed me over and over again. </p><p>In section <a href="http://composingprograms.com/pages/23-sequences.html#linked-lists">2.3.7 Linked Lists</a>, a definition of linked list was introduced by using the python built-in type <code>list</code> only. It used <code>empty = &#39;empty&#39;</code> to suggest the end of the linked list, whereas I plan to use <code>NoneType</code> to standardize the code. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">link0 = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;empty&#x27;</span>]]]]  <span class="hljs-comment"># Linked list from book</span><br>link1 = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-literal">None</span>]]]]     <span class="hljs-comment"># Linked list with NoneType</span><br></code></pre></td></tr></table></figure><h2 id="Construct"><a href="#Construct" class="headerlink" title="Construct"></a>Construct</h2><p>Firstly, we need a function to check a given list is a linked list or not: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_link</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;return True if formal parameter s is a linked list. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> s == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> (<span class="hljs-built_in">len</span>(s) == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> is_link(s[<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><p>And naturally, the function <code>link()</code> can help us wrap up the <code>head</code> and <code>rest</code> two part into a new list whose length is 2. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">link</span>(<span class="hljs-params">head, rest=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">assert</span> is_link(rest), <span class="hljs-string">&quot;The rest part must be a linked list. &quot;</span><br>    <span class="hljs-keyword">return</span> [head, rest]<br></code></pre></td></tr></table></figure><p>Different from the definition I written in <a href="https://lingkkang.github.io/2022/05/16/Linked-List-in-Python/">my previous post</a>, this definition generates a linked list from tail side to head. But nothing changed actually. Let’s take a closer look at it. </p><div class="note note-success">            <p>Notice:</p><p>According to this definition, <code>None</code> is a legal linked list, whereas <code>[None]</code> is illegal. </p><p>This detail could be helpful to the functions coming ahead. </p>          </div><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>We need some useful functions to manipulate our new data type. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">head</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Get value of current node. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;The function must be applied to a linked list. &quot;</span><br>    <span class="hljs-keyword">assert</span> s != <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;No empty linked list. &quot;</span><br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rest</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Move onto next node. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;The function must be applied to a linked list. &quot;</span><br>    <span class="hljs-keyword">assert</span> s != <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;No empty linked list. &quot;</span><br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>Except these functions unwrapping the linked list, we also need to measure it’s length and evaluate the value of arbitrary node. </p><h3 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">len_link</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the length of the linked list. &quot;&quot;&quot;</span><br>    length = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> s:<br>        s, length = rest(s), length + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> length<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_item_link</span>(<span class="hljs-params">s, i</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the i-th term value of given linked list s. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> i &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;item&#x27;s index should bigger than or equal to zero. &quot;</span><br>    <span class="hljs-keyword">assert</span> i &lt;= len_link(s)-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Given index exceeds the length of list. &quot;</span><br>    <span class="hljs-comment"># First item&#x27;s index is zero. </span><br>    <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:<br>        s, i = rest(s), i - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> head(s)<br></code></pre></td></tr></table></figure><p>Based on these fuctions, we can preliminarily manipulate our linked list. </p><h3 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h3><p>We can also rewrite our <code>len_link()</code> and <code>get_item_link()</code> functions in a recursive manner. This concept will emerge again later and is quite significant. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">len_link_recursive</span>(<span class="hljs-params">s</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;Return the length of the linked list. Recursive version. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + len_link_recursive(rest(s))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_item_link_recursive</span>(<span class="hljs-params">s, i</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the i-th term value of given linked list s. Recursive version. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> i &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;item&#x27;s index should bigger than or equal to zero. &quot;</span><br>    <span class="hljs-keyword">assert</span> i &lt;= len_link_recursive(s)-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Given index exceeds the length of list. &quot;</span><br>    <span class="hljs-comment"># First item&#x27;s index is zero. </span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>: <br>        <span class="hljs-keyword">return</span> head(s)<br>    <span class="hljs-keyword">return</span> get_item_link_recursive(rest(s), i-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h2><h3 id="Append"><a href="#Append" class="headerlink" title="Append"></a>Append</h3><p>Next step, we need to append the linked list. It seems that extending a <em>node-form</em> linked list - by simply altering it’s <code>Next</code> attribute - is handy, while appending the <em>list-form</em> linked list sounds not so intuitive. Well, partially true. </p><p>Here is the function from Composing Programs.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extend_link</span>(<span class="hljs-params">s, t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a list with the elements of s followed by those of t.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s) <span class="hljs-keyword">and</span> is_link(t)<br>    <span class="hljs-keyword">if</span> s == <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> t<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> link(first(s), extend_link(rest(s), t))<br></code></pre></td></tr></table></figure><p>This is a quite standard recursive function.  And here is the function I typed when I was first conceiving it. To make life much easier, I prefer writing them separately.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">append_link</span>(<span class="hljs-params">s, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a new linked list which was appended with &#x27;item&#x27; from s. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s) <span class="hljs-keyword">and</span> is_link(item), <span class="hljs-string">&quot;Input should be linked list. &quot;</span><br>    i = len_link_recursive(s)<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># Special case for empty list</span><br>        <span class="hljs-keyword">return</span> link(item)<br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> link(head(s), item)<br>    <span class="hljs-keyword">else</span>:<br>        lk =  append_link(rest(s), item)<br>    <span class="hljs-keyword">return</span> link(head(s), lk)<br></code></pre></td></tr></table></figure><p>Similarly, we can manage any other function with the concepts of <strong>higher-order function</strong> and <strong>recursion</strong>. </p><p>For example, apply a function to all entries in a linked list. </p><h3 id="Apply-to-all"><a href="#Apply-to-all" class="headerlink" title="Apply to all"></a>Apply to all</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_to_all_link</span>(<span class="hljs-params">f, s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Apply function f to all elements of s. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;Only apply to a linked list. &quot;</span><br>    <span class="hljs-keyword">if</span> s == <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">return</span> link(f(first(s)), apply_to_all_link(f, rest(s)))<br></code></pre></td></tr></table></figure><h2 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h2><p>So how to convert a linked list into a normal list? And vice versa? </p><p>Inherited from methods above, answers may not be very complicated. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">link_to_list</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Convert a linked list into a normal list. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;Should be a linked list. &quot;</span><br>    <span class="hljs-keyword">if</span> rest(s) <span class="hljs-keyword">and</span> s:<br>        <span class="hljs-keyword">return</span> [head(s)] + link_to_list(rest(s))<br>    <span class="hljs-keyword">return</span> [head(s)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_to_link</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Convert a normal list into a linked list. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> link(s[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> link(s[<span class="hljs-number">0</span>], list_to_link(s[<span class="hljs-number">1</span>:]))<br></code></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Using python built-in list to form a linked list, this probably is not a vary popular approach, and its efficiency is open to discussion. </p><p>However, what truly intriguing here is that even only one data type can be realized in various way. Also, every function in this post can be achieved in diverse manners. The possibilities in programming are always charming and charismatic. </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="http://composingprograms.com/pages/23-sequences.html">Composing Programs</a> by John DeNero;</li><li><a href="https://pythontutor.com/composingprograms.html">Online Python Tutor</a>;</li></ol>]]></content>
    
    
    <categories>
      
      <category>Algorithms &amp; Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Linked List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prism Plugin ERROR</title>
    <link href="/2022/08/17/Prism-Plugin-ERROR/"/>
    <url>/2022/08/17/Prism-Plugin-ERROR/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Prism-Plugin-ERROR"><a href="#Prism-Plugin-ERROR" class="headerlink" title="Prism Plugin ERROR"></a>Prism Plugin ERROR</h1><p>今天把 Hexo 主题换成了 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，感觉挺不错，但是在更改配置文件后出现了一些小问题。</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>更换好主题后运行 <code>hexo clean</code>，hexo 会报错，无法加载插件 <a href="https://www.npmjs.com/package/hexo-prism-plugin">hexo-prism-plugin</a>。</p><div class="note note-danger">            <p>INFO  Validating config<br>ERROR Plugin load failed: hexo-prism-plugin</p>          </div><p>这是一个代码块高亮的插件，fluid 默认使用的是 <code>highlightjs</code>, 这个插件应该是原来主题的依赖。</p><p>但奇怪的是，尽管新主题并不会用到这个插件，hexo 仍会不断报错。</p><p>尝试更新 hexo 和插件本身都始终会报错，并且在运行 <code>hexo g</code> 和 <code>hexo s</code> 时均会报 <code>ERROR</code>。在 <a href="https://hexo.io/docs/troubleshooting">hexo troubleshooting</a> 及互联网上都无法找到类似情况。在另一主题下找到<a href="https://github.com/Fechin/hexo-theme-diaspora/issues/35">类似情况</a>，下面回答是 hexo 的问题。</p><p>运行 <code>npm audix</code>, 显示其中就有该插件，严重程度为 <em>high vulnerability</em>。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>卸载插件，<code>npm uninstall hexo-prism-plugin</code>；</li><li>在博客文件根目录下的 <code>package.json</code> 中删除该插件依赖；</li><li>重新生成网页，根目录中的 <code>package-lock.json</code> 会自动修改，移除插件相关内容。</li></ol><p>至此，报错消失。</p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>首先使用直接下载的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/v1.9.2">fluid 主题最新 release 版本(v1.9.2)</a>，并且替换到 <code>themes</code> 文件夹，网页效果基本失效，主页无法正常显示。删除并尝试使用<a href="https://hexo.fluid-dev.com/docs/start/#%E6%96%B9%E5%BC%8F%E4%B8%80">作者推荐的方法</a>通过 npm 安装后则一切正常。不知道又是哪里卡到 bug 了。</p>]]></content>
    
    
    <categories>
      
      <category>Front End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Front-End</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Preliminary Year Summary</title>
    <link href="/2022/05/19/year-1-summary/"/>
    <url>/2022/05/19/year-1-summary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="学年总结"><a href="#学年总结" class="headerlink" title="学年总结"></a>学年总结</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=3944160&auto=0&height=66"></iframe><blockquote><p>涛声隐隐，那时，穿过林子应该便是海了。</p><p>黄锦树《雨》</p></blockquote><p>按往常来说，上个暑假叫“高三暑假”，那这个暑假便应该是“大一暑假”——也就是说大一还没有结束。但反正春季学期已经结束了，便当作这一学年也已经结束了吧。</p><p>本来觉得没有太多东西可以写，翻开手机相册发现也许能写的并不算太少。随便写一些。有许多照片已经不记得为什么拍下了，譬如说好几个小蛋糕，大概是买来犒劳自己的，但是因为完成了什么事而犒劳自己，已经没印象了。</p><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>记得刚来学校的第二天还是第三天晚上，刚刚安顿下来，就去绕着学校里跑了一圈。的确是感觉学校真的太小了，一圈才两公里。不过后来也感慨，多亏学校小，就算上课前五分钟才醒也赶得上早课。</p><p><img src="/images/PreYearSum/first_run.jpg" alt="校园跑（不是"> </p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><p>特别喜欢学校的图书馆，感觉好像很久之前就来过一样。</p><p><img src="/images/PreYearSum/lib1.jpg" alt="图书馆初印象"></p><p>最近这段时间特别喜欢在图书馆的露台上坐着。大概还是因为这两天天气好的缘故吧。有太阳又不太热，有风又不太冷。就坐着看书，常常坐到太阳下山。快把黄锦树的《雨》给看完了。</p><p><img src="/images/PreYearSum/lib2.jpg" alt="图书馆的奇妙经历"></p><p>上周期末考试的时候一整周都在下雨。下雨，但是又不怎么下得猛烈。东西都被雨沾得潮潮的，水汽把所有东西笼着，衣服干得慢，人也总不能舒爽。我老是想，既然一直下，何妨不下得大一点呢。</p><blockquote><p>第几天了，夜里下起大雨。好似一口瀑布直泻在屋顶上。他们全家就安睡于那轰然一气的雨声中，平时的虫声蛙鸣大人的鼾声梦话等等都听不到了。雨声充塞于天地之间。雨下满了整个夜。无边无际，也仿佛无始无终的。</p><p>黄锦树《老虎，老虎》</p></blockquote><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><p>学校里猫猫很多，但是和我没什么交集。我很喜欢那些猫猫，但是它们好像都不怎么喜欢我。每次还没来得及拍照就溜走了。</p><p><img src="/images/PreYearSum/cat.jpg" alt="猫猫不回头"></p><p>然后还有很多鸭鸭，但是都很霸气，我靠近都不带让路的。</p><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2><p>去年期末的时候画了棵圣诞树。真是独树一帜的风格。最开始的时候在上面写了 <code>&quot;Merry Christmas&quot;</code>，但是很搞笑地把<code>Merry</code>拼错了。这是第二版，已经学乖了，干脆不写字了哈哈哈。</p><p><img src="/images/PreYearSum/Christmas.jpg" alt="Merry Christmas!"></p><h2 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h2><p><img src="/images/PreYearSum/5ht.jpg" alt="5-HT Week"> </p><p>上上周学校有减压周的活动，但是我基本上啥都没参加，只蹭了件T恤和咖啡券——当懒和社恐合在一起的时候，人总是无可救药的。</p><h2 id="六、"><a href="#六、" class="headerlink" title="六、"></a>六、</h2><p>今天早上刚看了一部电影，《瞬息全宇宙》——或者叫《妈的多重宇宙》哈哈哈哈哈哈哈哈哈哈哈。</p><p><img src="/images/PreYearSum/img1.png" alt="摆烂箴言"></p><p align=center>    <code>        ↑是学习时的我！    </code></p><h2 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h2><p>感谢这一学年遇到的人，nice的室友、老师、朋友、同学、学长学姐······</p><h2 id="八、"><a href="#八、" class="headerlink" title="八、"></a>八、</h2><p>然后是两张无意义的照片。经常喜欢一个人在操场乱走——或者说，叫作散步。</p><p><img src="/images/PreYearSum/playground.jpg" alt="操场在发呆，所以失焦了；不过也有可能是镜头在发呆"></p><p><img src="/images/PreYearSum/littlebird.jpg" alt="一只小小小小鸟"></p><p><img src="/images/PreYearSum/res.jpg" alt="食堂蒸汽朋克车间"></p><p>不写太多了，插入图片还挺麻烦，预览起来也不太好看，等我搞懂怎么控制图片的大小再说。</p><p>最后有一段话，送给自己吧，虽然已经抄在笔记本里很久了，也不妨再码一遍。</p><blockquote><p>铃木君是个聪明人，他很清楚，在这个应该尽量避免无畏之抵抗的世上，毫无必要的议论简直就是封建时代的流毒。要实现人生的目标不在于口舌而在于身体力行。凡事只要能按照自己的意愿不断推进，人生目标就会达成。没有辛劳、担心、争论而事情能够顺利进行，人生便可以“极乐流”的方式而达成。</p><p>夏目漱石《我是猫》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>生活</tag>
      
      <tag>Summary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linked List in Python</title>
    <link href="/2022/05/16/Linked-List-in-Python/"/>
    <url>/2022/05/16/Linked-List-in-Python/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Linked-List-in-Python"><a href="#Linked-List-in-Python" class="headerlink" title="Linked List in Python"></a>Linked List in Python</h1><h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><h3 id="5月16日"><a href="#5月16日" class="headerlink" title="5月16日"></a>5月16日</h3><p>这两天写了两道 LeetCode 题目，都是关于单向链表(Singly linked list)的，分别是 <a href="https://leetcode.com/problems/add-two-numbers/">2. Add Two Numbers (Medium)</a> 以及 <a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists (Easy)</a>。由简到难，先做了后者再去尝试了前者。</p><p>非常巧的是，在做第21题前，刚好了解到了归并排序(Merge sort)，并且试着用python写了一个归并脚本，只不过当时只用了 python 内置的数组。</p><h3 id="5月27日更新"><a href="#5月27日更新" class="headerlink" title="5月27日更新"></a>5月27日更新</h3><p>刚刚完成了 <a href="https://leetcode.com/problems/sort-list/">148. Sort List (Medium)</a>，用单向链表实现排序。</p><h2 id="单向链表与节点"><a href="#单向链表与节点" class="headerlink" title="单向链表与节点"></a>单向链表与节点</h2><p>单向链表，顾名思义只有从前往后的单向连接，反之则不行。使用单向列表的好处在于，当需要在链表中插入数据时，只需要遍历链表找到需要插入数据的位置，将前一个节点改为指向新节点，并且让新节点指向后继节点即可，省去了数组中元素后移的麻烦。删除同理。</p><p>在实际代码中往往用第一个节点来指代整个链表。</p><p>在 LeetCode 题目中，单个节点的定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>也就是说，一个节点只有它本身的值(val)以及next两个属性，其中 next 用来指向下一个节点。通过 <code>list1 = list.next</code> 来移动到下一个节点，当 <code>list1 == None</code> 时（或 <code>list1.next == None</code>，即没有后继节点），链表结束。</p><p>一般情况下还会定义一个 <code>LinkedList</code> 类，把查找、插入、删除等函数都打包进类里。LeetCode这里属于是极简配置了，但不影响数据结构的讨论。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>先看简单的第21题。</p><h3 id="第21题-合并有序链表"><a href="#第21题-合并有序链表" class="headerlink" title="第21题 合并有序链表"></a>第21题 合并有序链表</h3><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></p><p>题目要求将两个由小到大排序的单向链表合并成一个，输入和输出都是 ListNode 实例。</p><p>先上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:   <br>        <br>        <span class="hljs-comment"># 如果有空链表，直接返回另一个链表</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> list1:<br>            <span class="hljs-keyword">return</span> list2 <br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> list2:<br>            <span class="hljs-keyword">return</span> list1<br>        <br>        <span class="hljs-comment"># 将第一个值小的初始化为输出链表的第一个值</span><br>        <span class="hljs-keyword">if</span> list1.val &lt;= list2.val:<br>            output = list1<br>            list1 = list1.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">else</span>:<br>            output = list2<br>            list2 = list2.<span class="hljs-built_in">next</span><br>        head = output<br><br>        <span class="hljs-keyword">while</span> list1 != <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> list2 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 将较小的值赋给current，并将链表移到下一个节点</span><br>            <span class="hljs-keyword">if</span> list1.val &lt;= list2.val:<br>                current = list1<br>                list1 = list1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                current = list2<br>                list2 = list2.<span class="hljs-built_in">next</span><br>            output.<span class="hljs-built_in">next</span> = current<br>            output = output.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-comment"># 如果有一个链表已经没有后继节点</span><br>        <span class="hljs-comment"># 则直接将另一个链表剩余节点加在输出链表末尾</span><br>        <span class="hljs-keyword">if</span> list1 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">while</span> list1 != <span class="hljs-literal">None</span>:<br>                output.<span class="hljs-built_in">next</span> = list1<br>                list1 = list1.<span class="hljs-built_in">next</span><br>                output = output.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">elif</span> list2 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">while</span> list2 != <span class="hljs-literal">None</span>:<br>                output.<span class="hljs-built_in">next</span> = list2<br>                list2 = list2.<span class="hljs-built_in">next</span><br>                output = output.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> head <span class="hljs-comment">#用链表第一个节点来指代链表，只要返回第一个节点即可</span><br></code></pre></td></tr></table></figure><p>这里值得注意的是和python内置的数组一样，<code>while list1 != None:</code> 和 <code>while list1:</code> 意义相同，都表示‘不为空时’。当节点为 <code>None</code> 时，逻辑值相当于 <code>False</code>。</p><p>这个解法看起来略显繁琐，但是运行时间和占用内存都并不大，也很容易理解。</p><h3 id="第2题-反向求和"><a href="#第2题-反向求和" class="headerlink" title="第2题 反向求和"></a>第2题 反向求和</h3><p><a href="https://leetcode.com/problems/add-two-numbers/">2. Add Two Numbers (Medium)</a></p><p>这道题目本身还挺搞的，把两个需要相加的数倒了过来，每个数位都放在链表的节点中，如下所示：<br><img src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" alt="342 + 465 = 807" title="AddTwoNumbers"></p><p>这里注意到的是数字高位和低位颠倒了过来，因此相加时新的数位产生在最右侧。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: <span class="hljs-type">Optional</span>[ListNode], l2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        output = ListNode()<br>        header = output<br>        upper = <span class="hljs-number">0</span> <span class="hljs-comment"># 表示进位</span><br>        <span class="hljs-keyword">while</span> l1 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> l2 != <span class="hljs-literal">None</span>:<br>                ans = l1.val + l2.val + upper<br>                upper = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">9</span>:<br>                    output.val = ans - <span class="hljs-number">10</span><br>                    upper = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    output.val = ans<br>                l2 = l2.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                ans = l1.val + upper<br>                upper = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">9</span>:<br>                    output.val = ans - <span class="hljs-number">10</span><br>                    upper = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    output.val = ans<br>            <br>            <span class="hljs-comment"># 当达到链表末尾时，需要考虑是否要留出一位来存放进位</span><br>            <span class="hljs-comment"># 第40行同理</span><br>            <span class="hljs-keyword">if</span> l1.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> upper == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> l2 != <span class="hljs-literal">None</span>:<br>                output.<span class="hljs-built_in">next</span> = ListNode()<br>            output = output.<span class="hljs-built_in">next</span><br>            l1 = l1.<span class="hljs-built_in">next</span><br>            <br>        <span class="hljs-keyword">while</span> l2 != <span class="hljs-literal">None</span>:<br>            ans = l2.val + upper<br>            upper = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">9</span>:<br>                output.val = ans - <span class="hljs-number">10</span><br>                upper = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>: <br>                output.val = ans<br>            <span class="hljs-keyword">if</span> l2.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> upper == <span class="hljs-number">1</span>:<br>                output.<span class="hljs-built_in">next</span> = ListNode()<br>            output = output.<span class="hljs-built_in">next</span><br>            l2 = l2.<span class="hljs-built_in">next</span><br>            <br>        <span class="hljs-keyword">if</span> upper == <span class="hljs-number">1</span>:<br>            output.val = <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> header<br></code></pre></td></tr></table></figure><p>思路和上一题一样，取出一个数后移动节点，需要注意的是逢十进一。<em>此处还有优化空间。</em></p><p>但是这次不同的是我选择新创建了一个节点实例来表示输出链表(<code>output = ListNode()</code>)，实际上和使用已有链表来初始化作用相同。</p><h3 id="第148题-链表排序"><a href="#第148题-链表排序" class="headerlink" title="第148题 链表排序"></a>第148题 链表排序</h3><p><a href="https://leetcode.com/problems/sort-list/">148. Sort List (Medium)</a></p><p>题目要求很简单，将输入链表排序后输出。</p><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h4><p>很显然，最容易想到和代码实现的排序方法就是冒泡排序。以下是我第一次尝试时写的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortList</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-comment"># bubble sort</span><br>        current = head<br>        exchange = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">while</span> exchange:<br>            exchange = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">while</span> current <span class="hljs-keyword">and</span> current.<span class="hljs-built_in">next</span>:<br>                <span class="hljs-keyword">if</span> current.val &gt; current.<span class="hljs-built_in">next</span>.val:<br>                    mid = current.val<br>                    current.val = current.<span class="hljs-built_in">next</span>.val<br>                    current.<span class="hljs-built_in">next</span>.val = mid<br>                    exchange = <span class="hljs-literal">True</span><br>                current = current.<span class="hljs-built_in">next</span><br>            current = head<br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><p>但非常可惜的是，当测试用例极大时，使用冒泡排序会超时。</p><blockquote><p>Time Limit Exceeded </p></blockquote><h4 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h4><p>意外发现用单向链表实现归并排序会比用 <code>list</code> 方便很多，尤其是归并这一步，但是不太容易想到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortList</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-comment"># merge sort</span><br>        <span class="hljs-keyword">if</span> head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        left = head<br>        right = self.get_mid(head)<br>        transection = right.<span class="hljs-built_in">next</span><br>        right.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        left = self.sortList(left)<br>        right = self.sortList(transection)<br>        merge = self.merge(left, right)<br>        <span class="hljs-keyword">return</span> merge<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, LN1, LN2</span>):<br>        tail = ListNode()<br>        out = tail<br>        <span class="hljs-keyword">while</span> LN1 <span class="hljs-keyword">and</span> LN2:<br>            <span class="hljs-keyword">if</span> LN1.val &lt; LN2.val:<br>                tail.<span class="hljs-built_in">next</span> = LN1<br>                LN1 = LN1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                tail.<span class="hljs-built_in">next</span> = LN2<br>                LN2 = LN2.<span class="hljs-built_in">next</span><br>            tail = tail.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> LN1:<br>            tail.<span class="hljs-built_in">next</span> = LN1<br>        <span class="hljs-keyword">elif</span> LN2:<br>            tail.<span class="hljs-built_in">next</span> = LN2<br>        out = out.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> out<br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mid</span>(<span class="hljs-params">self, head</span>):<br>        a = head<br>        b = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> b <span class="hljs-keyword">and</span> b.<span class="hljs-built_in">next</span>:<br>                a = a.<span class="hljs-built_in">next</span><br>                b = b.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>在整个编程过程中，最需要注意的还是链表的末尾。一不小心经常容易出现赋值给 <code>None</code> 或者取值 <code>None.next</code> 的报错。</p>]]></content>
    
    
    <categories>
      
      <category>Algorithms &amp; Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Linked List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Article</title>
    <link href="/2022/05/15/test-article/"/>
    <url>/2022/05/15/test-article/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="A-Simple-test"><a href="#A-Simple-test" class="headerlink" title="A Simple test"></a>A Simple test</h1><p>This is a simple test.<br>Pages hoseted on GitHub.<br>Build in Hexo with theme fluid. </p>]]></content>
    
    
    <categories>
      
      <category>Front End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Front-End</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/15/hello-world/"/>
    <url>/2022/05/15/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
