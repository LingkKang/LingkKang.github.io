<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linked List with Python Built-in List</title>
    <link href="/2022/08/18/Linked-List-with-Python-Built-in-List/"/>
    <url>/2022/08/18/Linked-List-with-Python-Built-in-List/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Linked-List-with-Python-Built-in-List"><a href="#Linked-List-with-Python-Built-in-List" class="headerlink" title="Linked List with Python Built-in List"></a>Linked List with Python Built-in List</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>I was currently reading the <a href="http://composingprograms.com/">Composing Programs</a>, which amazed me over and over again. </p><p>In section <a href="http://composingprograms.com/pages/23-sequences.html#linked-lists">2.3.7 Linked Lists</a>, a definition of linked list was introduced by using the python built-in type <code>list</code> only. It used <code>empty = &#39;empty&#39;</code> to suggest the end of the linked list, whereas I plan to use <code>NoneType</code> to standadize the code. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">link0 = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;empty&#x27;</span>]]]]  <span class="hljs-comment"># Linked list from book</span><br>link1 = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-literal">None</span>]]]]     <span class="hljs-comment"># Linked list with NoneType</span><br></code></pre></td></tr></table></figure><h2 id="Make-a-linked-list"><a href="#Make-a-linked-list" class="headerlink" title="Make a linked list"></a>Make a linked list</h2><p>Firstly, we need a function to check a given list is a linked list or not: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_link</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;return True if argument is a linked list. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> s == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> (<span class="hljs-built_in">len</span>(s) == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> is_link(s[<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><p>And naturally, the function <code>link()</code> can help us wrap up the <code>head</code> and <code>rest</code> two part into a new list whose length is 2. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">link</span>(<span class="hljs-params">head, rest=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">assert</span> is_link(rest), <span class="hljs-string">&quot;The rest part must be a linked list. &quot;</span><br>    <span class="hljs-keyword">return</span> [head, rest]<br></code></pre></td></tr></table></figure><p>Different from the difinition I written in <a href="https://lingkkang.github.io/2022/05/16/Linked-List-in-Python/">my previous post</a>, this definition generates a linked list from tail side to head. </p><div class="note note-success">            <p>Notice Here:</p><p>According to the definition, <code>None</code> is a legal linked list, whereas <code>[None]</code> is illigal.</p>          </div><h2 id="Implement-it"><a href="#Implement-it" class="headerlink" title="Implement it"></a>Implement it</h2><p>We need some useful functions to manipulate our new data type. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">head</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Get value of current node. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;The function must be applied to a linked list. &quot;</span><br>    <span class="hljs-keyword">assert</span> s != <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;No empty linked list. &quot;</span><br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rest</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Move onto next node. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;The function must be applied to a linked list. &quot;</span><br>    <span class="hljs-keyword">assert</span> s != <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;No empty linked list. &quot;</span><br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>Excep these functions to unwrap the list, we also need to get it’s length and value of arbitrary node. </p><h3 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">len_link</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the length of the linked list. &quot;&quot;&quot;</span><br>    length = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> s:<br>        s, length = rest(s), length + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> length<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_item_link</span>(<span class="hljs-params">s, i</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the i-th term value of given linked list s. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> i &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;item&#x27;s index should bigger than or equal to zero. &quot;</span><br>    <span class="hljs-keyword">assert</span> i &lt;= len_link(s)-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Given index exceeds the length of list. &quot;</span><br>    <span class="hljs-comment"># First item&#x27;s index is zero. </span><br>    <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:<br>        s, i = rest(s), i - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> head(s)<br></code></pre></td></tr></table></figure><p>Based on these fuctions, we can manipulate our linked list preliminarily. </p><h3 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h3><p>We can also rewrite our <code>len_link()</code> and <code>get_item_link()</code> functions in a recursive manner, and this concept will emerge again later. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">len_link_recursive</span>(<span class="hljs-params">s</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;Return the length of the linked list. Recursive version. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + len_link_recursive(rest(s))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_item_link_recursive</span>(<span class="hljs-params">s, i</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the i-th term value of given linked list s. Recursive version. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> i &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;item&#x27;s index should bigger than or equal to zero. &quot;</span><br>    <span class="hljs-keyword">assert</span> i &lt;= len_link_recursive(s)-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Given index exceeds the length of list. &quot;</span><br>    <span class="hljs-comment"># First item&#x27;s index is zero. </span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>: <br>        <span class="hljs-keyword">return</span> head(s)<br>    <span class="hljs-keyword">return</span> get_item_link_recursive(rest(s), i-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h2><h3 id="Append"><a href="#Append" class="headerlink" title="Append"></a>Append</h3><p>Next step, we need to append the linked list. It seems that extending a <em>node-form</em> linked list - by simply altering it’s <code>Next</code> attribute - is handy, while appending the <em>list-form</em> linked list is not so easy. Well, partially true. </p><p>Here is the function from Composing Programs.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extend_link</span>(<span class="hljs-params">s, t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a list with the elements of s followed by those of t.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s) <span class="hljs-keyword">and</span> is_link(t)<br>    <span class="hljs-keyword">if</span> s == <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> t<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> link(first(s), extend_link(rest(s), t))<br></code></pre></td></tr></table></figure><p>To make life much easier, I prefer writing it separately. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">append_link</span>(<span class="hljs-params">s, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a new linked list which was appended with &#x27;item&#x27; from s. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s) <span class="hljs-keyword">and</span> is_link(item), <span class="hljs-string">&quot;Input should be linked list. &quot;</span><br>    i = len_link_recursive(s)<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># Special case for empty list</span><br>        <span class="hljs-keyword">return</span> link(item)<br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> link(head(s), item)<br>    <span class="hljs-keyword">else</span>:<br>        lk =  append_link(rest(s), item)<br>    <span class="hljs-keyword">return</span> link(head(s), lk)<br></code></pre></td></tr></table></figure><p>Similarly, we can manage other functions with the concepts of <strong>higher-order function</strong> and <strong>recursion</strong>. </p><h3 id="Apply-to-all"><a href="#Apply-to-all" class="headerlink" title="Apply to all"></a>Apply to all</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_to_all_link</span>(<span class="hljs-params">f, s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Apply function f to all elements of s. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;Only apply to a linked list. &quot;</span><br>    <span class="hljs-keyword">if</span> s == <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">return</span> link(f(first(s)), apply_to_all_link(f, rest(s)))<br></code></pre></td></tr></table></figure><h2 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h2><p>So how to conver a linked list into a normal list and vise versa? </p><p>Inherited from methods above, answers may not be very complicated. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">link_to_list</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Convert a linked list into a normal list. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> is_link(s), <span class="hljs-string">&quot;Should be a linked list. &quot;</span><br>    <span class="hljs-keyword">if</span> rest(s) <span class="hljs-keyword">and</span> s:<br>        <span class="hljs-keyword">return</span> [head(s)] + link_to_list(rest(s))<br>    <span class="hljs-keyword">return</span> [head(s)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_to_link</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Convert a normal list into a linked list. &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> link(s[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> link(s[<span class="hljs-number">0</span>], list_to_link(s[<span class="hljs-number">1</span>:]))<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>UNFINISHED</p>          </div><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://composingprograms.com/pages/23-sequences.html">Composing Programs</a> by John DeNero;</li><li><a href="https://pythontutor.com/composingprograms.html">Online Python Tutor</a>;</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prism Plugin ERROR</title>
    <link href="/2022/08/17/Prism-Plugin-ERROR/"/>
    <url>/2022/08/17/Prism-Plugin-ERROR/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Prism-Plugin-ERROR"><a href="#Prism-Plugin-ERROR" class="headerlink" title="Prism Plugin ERROR"></a>Prism Plugin ERROR</h1><p>今天把 Hexo 主题换成了 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，感觉挺不错，但是在更改配置文件后出现了一些小问题。</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>更换好主题后运行 <code>hexo clean</code>，hexo 会报错，无法加载插件 <a href="https://www.npmjs.com/package/hexo-prism-plugin">hexo-prism-plugin</a>。</p><div class="note note-danger">            <p>INFO  Validating config<br>ERROR Plugin load failed: hexo-prism-plugin</p>          </div><p>这是一个代码块高亮的插件，fluid 默认使用的是 <code>highlightjs</code>, 这个插件应该是原来主题的依赖。</p><p>但奇怪的是，尽管新主题并不会用到这个插件，hexo 仍会不断报错。</p><p>尝试更新 hexo 和插件本身都始终会报错，并且在运行 <code>hexo g</code> 和 <code>hexo s</code> 时均会报 <code>ERROR</code>。在 <a href="https://hexo.io/docs/troubleshooting">hexo troubleshooting</a> 及互联网上都无法找到类似情况。在另一主题下找到<a href="https://github.com/Fechin/hexo-theme-diaspora/issues/35">类似情况</a>，下面回答是 hexo 的问题。</p><p>运行 <code>npm audix</code>, 显示其中就有该插件，严重程度为 <em>high vulnerability</em>。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>卸载插件，<code>npm uninstall hexo-prism-plugin</code>；</li><li>在博客文件根目录下的 <code>package.json</code> 中删除该插件依赖；</li><li>重新生成网页，根目录中的 <code>package-lock.json</code> 会自动修改，移除插件相关内容。</li></ol><p>至此，报错消失。</p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>首先使用直接下载的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/v1.9.2">fluid 主题最新 release 版本(v1.9.2)</a>，并且替换到 <code>themes</code> 文件夹，网页效果基本失效，主页无法正常显示。删除并尝试使用<a href="https://hexo.fluid-dev.com/docs/start/#%E6%96%B9%E5%BC%8F%E4%B8%80">作者推荐的方法</a>通过 npm 安装后则一切正常。不知道又是哪里卡到 bug 了。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Preliminary Year Summary</title>
    <link href="/2022/05/19/year-1-summary/"/>
    <url>/2022/05/19/year-1-summary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="学年总结"><a href="#学年总结" class="headerlink" title="学年总结"></a>学年总结</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=3944160&auto=0&height=66"></iframe><blockquote><p>涛声隐隐，那时，穿过林子应该便是海了。</p><p>黄锦树《雨》</p></blockquote><p>按往常来说，上个暑假叫“高三暑假”，那这个暑假便应该是“大一暑假”——也就是说大一还没有结束。但反正春季学期已经结束了，便当作这一学年也已经结束了吧。</p><p>本来觉得没有太多东西可以写，翻开手机相册发现也许能写的并不算太少。随便写一些。有许多照片已经不记得为什么拍下了，譬如说好几个小蛋糕，大概是买来犒劳自己的，但是因为完成了什么事而犒劳自己，已经没印象了。</p><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>记得刚来学校的第二天还是第三天晚上，刚刚安顿下来，就去绕着学校里跑了一圈。的确是感觉学校真的太小了，一圈才两公里。不过后来也感慨，多亏学校小，就算上课前五分钟才醒也赶得上早课。</p><p><img src="/images/PreYearSum/first_run.jpg" alt="校园跑（不是"> </p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><p>特别喜欢学校的图书馆，感觉好像很久之前就来过一样。</p><p><img src="/images/PreYearSum/lib1.jpg" alt="图书馆初印象"></p><p>最近这段时间特别喜欢在图书馆的露台上坐着。大概还是因为这两天天气好的缘故吧。有太阳又不太热，有风又不太冷。就坐着看书，常常坐到太阳下山。快把黄锦树的《雨》给看完了。</p><p><img src="/images/PreYearSum/lib2.jpg" alt="图书馆的奇妙经历"></p><p>上周期末考试的时候一整周都在下雨。下雨，但是又不怎么下得猛烈。东西都被雨沾得潮潮的，水汽把所有东西笼着，衣服干得慢，人也总不能舒爽。我老是想，既然一直下，何妨不下得大一点呢。</p><blockquote><p>第几天了，夜里下起大雨。好似一口瀑布直泻在屋顶上。他们全家就安睡于那轰然一气的雨声中，平时的虫声蛙鸣大人的鼾声梦话等等都听不到了。雨声充塞于天地之间。雨下满了整个夜。无边无际，也仿佛无始无终的。</p><p>黄锦树《老虎，老虎》</p></blockquote><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><p>学校里猫猫很多，但是和我没什么交集。我很喜欢那些猫猫，但是它们好像都不怎么喜欢我。每次还没来得及拍照就溜走了。</p><p><img src="/images/PreYearSum/cat.jpg" alt="猫猫不回头"></p><p>然后还有很多鸭鸭，但是都很霸气，我靠近都不带让路的。</p><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2><p>去年期末的时候画了棵圣诞树。真是独树一帜的风格。最开始的时候在上面写了 <code>&quot;Merry Christmas&quot;</code>，但是很搞笑地把<code>Merry</code>拼错了。这是第二版，已经学乖了，干脆不写字了哈哈哈。</p><p><img src="/images/PreYearSum/Christmas.jpg" alt="Merry Christmas!"></p><h2 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h2><p><img src="/images/PreYearSum/5ht.jpg" alt="5-HT Week"> </p><p>上上周学校有减压周的活动，但是我基本上啥都没参加，只蹭了件T恤和咖啡券——当懒和社恐合在一起的时候，人总是无可救药的。</p><h2 id="六、"><a href="#六、" class="headerlink" title="六、"></a>六、</h2><p>今天早上刚看了一部电影，《瞬息全宇宙》——或者叫《妈的多重宇宙》哈哈哈哈哈哈哈哈哈哈哈。</p><p><img src="/images/PreYearSum/img1.png" alt="摆烂箴言"></p><p align=center>    <code>        ↑是学习时的我！    </code></p><h2 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h2><p>感谢这一学年遇到的人，nice的室友、老师、朋友、同学、学长学姐······</p><h2 id="八、"><a href="#八、" class="headerlink" title="八、"></a>八、</h2><p>然后是两张无意义的照片。经常喜欢一个人在操场乱走——或者说，叫作散步。</p><p><img src="/images/PreYearSum/playground.jpg" alt="操场在发呆，所以失焦了；不过也有可能是镜头在发呆"></p><p><img src="/images/PreYearSum/littlebird.jpg" alt="一只小小小小鸟"></p><p><img src="/images/PreYearSum/res.jpg" alt="食堂蒸汽朋克车间"></p><p>不写太多了，插入图片还挺麻烦，预览起来也不太好看，等我搞懂怎么控制图片的大小再说。</p><p>最后有一段话，送给自己吧，虽然已经抄在笔记本里很久了，也不妨再码一遍。</p><blockquote><p>铃木君是个聪明人，他很清楚，在这个应该尽量避免无畏之抵抗的世上，毫无必要的议论简直就是封建时代的流毒。要实现人生的目标不在于口舌而在于身体力行。凡事只要能按照自己的意愿不断推进，人生目标就会达成。没有辛劳、担心、争论而事情能够顺利进行，人生便可以“极乐流”的方式而达成。</p><p>夏目漱石《我是猫》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读书</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linked List in Python</title>
    <link href="/2022/05/16/Linked-List-in-Python/"/>
    <url>/2022/05/16/Linked-List-in-Python/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Linked-List-in-Python"><a href="#Linked-List-in-Python" class="headerlink" title="Linked List in Python"></a>Linked List in Python</h1><h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><h3 id="5月16日"><a href="#5月16日" class="headerlink" title="5月16日"></a>5月16日</h3><p>这两天写了两道 LeetCode 题目，都是关于单向链表(Singly linked list)的，分别是 <a href="https://leetcode.com/problems/add-two-numbers/">2. Add Two Numbers (Medium)</a> 以及 <a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists (Easy)</a>。由简到难，先做了后者再去尝试了前者。</p><p>非常巧的是，在做第21题前，刚好了解到了归并排序(Merge sort)，并且试着用python写了一个归并脚本，只不过当时只用了 python 内置的数组。</p><h3 id="5月27日更新"><a href="#5月27日更新" class="headerlink" title="5月27日更新"></a>5月27日更新</h3><p>刚刚完成了 <a href="https://leetcode.com/problems/sort-list/">148. Sort List (Medium)</a>，用单向链表实现排序。</p><h2 id="单向链表与节点"><a href="#单向链表与节点" class="headerlink" title="单向链表与节点"></a>单向链表与节点</h2><p>单向链表，顾名思义只有从前往后的单向连接，反之则不行。使用单向列表的好处在于，当需要在链表中插入数据时，只需要遍历链表找到需要插入数据的位置，将前一个节点改为指向新节点，并且让新节点指向后继节点即可，省去了数组中元素后移的麻烦。删除同理。</p><p>在实际代码中往往用第一个节点来指代整个链表。</p><p>在 LeetCode 题目中，单个节点的定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>也就是说，一个节点只有它本身的值(val)以及next两个属性，其中 next 用来指向下一个节点。通过 <code>list1 = list.next</code> 来移动到下一个节点，当 <code>list1 == None</code> 时（或 <code>list1.next == None</code>，即没有后继节点），链表结束。</p><p>一般情况下还会定义一个 <code>LinkedList</code> 类，把查找、插入、删除等函数都打包进类里。LeetCode这里属于是极简配置了，但不影响数据结构的讨论。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>先看简单的第21题。</p><h3 id="第21题-合并有序链表"><a href="#第21题-合并有序链表" class="headerlink" title="第21题 合并有序链表"></a>第21题 合并有序链表</h3><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></p><p>题目要求将两个由小到大排序的单向链表合并成一个，输入和输出都是 ListNode 实例。</p><p>先上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:   <br>        <br>        <span class="hljs-comment"># 如果有空链表，直接返回另一个链表</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> list1:<br>            <span class="hljs-keyword">return</span> list2 <br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> list2:<br>            <span class="hljs-keyword">return</span> list1<br>        <br>        <span class="hljs-comment"># 将第一个值小的初始化为输出链表的第一个值</span><br>        <span class="hljs-keyword">if</span> list1.val &lt;= list2.val:<br>            output = list1<br>            list1 = list1.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">else</span>:<br>            output = list2<br>            list2 = list2.<span class="hljs-built_in">next</span><br>        head = output<br><br>        <span class="hljs-keyword">while</span> list1 != <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> list2 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 将较小的值赋给current，并将链表移到下一个节点</span><br>            <span class="hljs-keyword">if</span> list1.val &lt;= list2.val:<br>                current = list1<br>                list1 = list1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                current = list2<br>                list2 = list2.<span class="hljs-built_in">next</span><br>            output.<span class="hljs-built_in">next</span> = current<br>            output = output.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-comment"># 如果有一个链表已经没有后继节点</span><br>        <span class="hljs-comment"># 则直接将另一个链表剩余节点加在输出链表末尾</span><br>        <span class="hljs-keyword">if</span> list1 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">while</span> list1 != <span class="hljs-literal">None</span>:<br>                output.<span class="hljs-built_in">next</span> = list1<br>                list1 = list1.<span class="hljs-built_in">next</span><br>                output = output.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">elif</span> list2 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">while</span> list2 != <span class="hljs-literal">None</span>:<br>                output.<span class="hljs-built_in">next</span> = list2<br>                list2 = list2.<span class="hljs-built_in">next</span><br>                output = output.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> head <span class="hljs-comment">#用链表第一个节点来指代链表，只要返回第一个节点即可</span><br></code></pre></td></tr></table></figure><p>这里值得注意的是和python内置的数组一样，<code>while list1 != None:</code> 和 <code>while list1:</code> 意义相同，都表示‘不为空时’。当节点为 <code>None</code> 时，逻辑值相当于 <code>False</code>。</p><p>这个解法看起来略显繁琐，但是运行时间和占用内存都并不大，也很容易理解。</p><h3 id="第2题-反向求和"><a href="#第2题-反向求和" class="headerlink" title="第2题 反向求和"></a>第2题 反向求和</h3><p><a href="https://leetcode.com/problems/add-two-numbers/">2. Add Two Numbers (Medium)</a></p><p>这道题目本身还挺搞的，把两个需要相加的数倒了过来，每个数位都放在链表的节点中，如下所示：<br><img src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" alt="342 + 465 = 807" title="AddTwoNumbers"></p><p>这里注意到的是数字高位和低位颠倒了过来，因此相加时新的数位产生在最右侧。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: <span class="hljs-type">Optional</span>[ListNode], l2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        output = ListNode()<br>        header = output<br>        upper = <span class="hljs-number">0</span> <span class="hljs-comment"># 表示进位</span><br>        <span class="hljs-keyword">while</span> l1 != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> l2 != <span class="hljs-literal">None</span>:<br>                ans = l1.val + l2.val + upper<br>                upper = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">9</span>:<br>                    output.val = ans - <span class="hljs-number">10</span><br>                    upper = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    output.val = ans<br>                l2 = l2.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                ans = l1.val + upper<br>                upper = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">9</span>:<br>                    output.val = ans - <span class="hljs-number">10</span><br>                    upper = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    output.val = ans<br>            <br>            <span class="hljs-comment"># 当达到链表末尾时，需要考虑是否要留出一位来存放进位</span><br>            <span class="hljs-comment"># 第40行同理</span><br>            <span class="hljs-keyword">if</span> l1.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> upper == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> l2 != <span class="hljs-literal">None</span>:<br>                output.<span class="hljs-built_in">next</span> = ListNode()<br>            output = output.<span class="hljs-built_in">next</span><br>            l1 = l1.<span class="hljs-built_in">next</span><br>            <br>        <span class="hljs-keyword">while</span> l2 != <span class="hljs-literal">None</span>:<br>            ans = l2.val + upper<br>            upper = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">9</span>:<br>                output.val = ans - <span class="hljs-number">10</span><br>                upper = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>: <br>                output.val = ans<br>            <span class="hljs-keyword">if</span> l2.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> upper == <span class="hljs-number">1</span>:<br>                output.<span class="hljs-built_in">next</span> = ListNode()<br>            output = output.<span class="hljs-built_in">next</span><br>            l2 = l2.<span class="hljs-built_in">next</span><br>            <br>        <span class="hljs-keyword">if</span> upper == <span class="hljs-number">1</span>:<br>            output.val = <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> header<br></code></pre></td></tr></table></figure><p>思路和上一题一样，取出一个数后移动节点，需要注意的是逢十进一。<em>此处还有优化空间。</em></p><p>但是这次不同的是我选择新创建了一个节点实例来表示输出链表(<code>output = ListNode()</code>)，实际上和使用已有链表来初始化作用相同。</p><h3 id="第148题-链表排序"><a href="#第148题-链表排序" class="headerlink" title="第148题 链表排序"></a>第148题 链表排序</h3><p><a href="https://leetcode.com/problems/sort-list/">148. Sort List (Medium)</a></p><p>题目要求很简单，将输入链表排序后输出。</p><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h4><p>很显然，最容易想到和代码实现的排序方法就是冒泡排序。以下是我第一次尝试时写的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortList</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-comment"># bubble sort</span><br>        current = head<br>        exchange = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">while</span> exchange:<br>            exchange = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">while</span> current <span class="hljs-keyword">and</span> current.<span class="hljs-built_in">next</span>:<br>                <span class="hljs-keyword">if</span> current.val &gt; current.<span class="hljs-built_in">next</span>.val:<br>                    mid = current.val<br>                    current.val = current.<span class="hljs-built_in">next</span>.val<br>                    current.<span class="hljs-built_in">next</span>.val = mid<br>                    exchange = <span class="hljs-literal">True</span><br>                current = current.<span class="hljs-built_in">next</span><br>            current = head<br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><p>但非常可惜的是，当测试用例极大时，使用冒泡排序会超时。</p><blockquote><p>Time Limit Exceeded </p></blockquote><h4 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h4><p>意外发现用单向链表实现归并排序会比用 <code>list</code> 方便很多，尤其是归并这一步，但是不太容易想到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortList</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-comment"># merge sort</span><br>        <span class="hljs-keyword">if</span> head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        left = head<br>        right = self.get_mid(head)<br>        transection = right.<span class="hljs-built_in">next</span><br>        right.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        left = self.sortList(left)<br>        right = self.sortList(transection)<br>        merge = self.merge(left, right)<br>        <span class="hljs-keyword">return</span> merge<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, LN1, LN2</span>):<br>        tail = ListNode()<br>        out = tail<br>        <span class="hljs-keyword">while</span> LN1 <span class="hljs-keyword">and</span> LN2:<br>            <span class="hljs-keyword">if</span> LN1.val &lt; LN2.val:<br>                tail.<span class="hljs-built_in">next</span> = LN1<br>                LN1 = LN1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                tail.<span class="hljs-built_in">next</span> = LN2<br>                LN2 = LN2.<span class="hljs-built_in">next</span><br>            tail = tail.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> LN1:<br>            tail.<span class="hljs-built_in">next</span> = LN1<br>        <span class="hljs-keyword">elif</span> LN2:<br>            tail.<span class="hljs-built_in">next</span> = LN2<br>        out = out.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> out<br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mid</span>(<span class="hljs-params">self, head</span>):<br>        a = head<br>        b = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> b <span class="hljs-keyword">and</span> b.<span class="hljs-built_in">next</span>:<br>                a = a.<span class="hljs-built_in">next</span><br>                b = b.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>在整个编程过程中，最需要注意的还是链表的末尾。一不小心经常容易出现赋值给 <code>None</code> 或者取值 <code>None.next</code> 的报错。</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Article</title>
    <link href="/2022/05/15/test-article/"/>
    <url>/2022/05/15/test-article/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="A-Simple-test"><a href="#A-Simple-test" class="headerlink" title="A Simple test"></a>A Simple test</h1><p>This is a simple test.<br>Pages hoseted on GitHub.<br>Build in Hexo with theme fluid. </p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>前端</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/15/hello-world/"/>
    <url>/2022/05/15/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Uncategorized</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
